public class CS
{
    public static string CSBul1 = "<h2>Глава 1. Въведение в програмирането</h2><br/><span class=\"tab\"></span>1. Запознайте се с Microsoft Visual Studio, Microsoft Developer Network (MSDN) Library Documentation. Инсталирайте<br/><br/><span class=\"tab\"></span>Упътване: Ако разполагате с DreamSpark акаунт или вашето училище или университет предлага безплатен достъп до продуктите на Microsoft, си инсталирайте пълната версия на Microsoft Visual Studio. Ако нямате възможност да работите с пълната версия на Microsoft Visual Studio, можете безплатно да си изтеглите Visual C# Express от сайта на Microsoft, който е напълно безплатен за използване с учебна цел.<br/><br/><span class=\"tab\"></span>Решение: Безплатна версия на Visual Studio може да бъде изтеглена от следния линк: <a href=" + "http://www.visualstudio.com/en-us/products/free-developer-offers-vs" + " target=\"_blank\"><b><u>Visual Studio</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Да се намери описанието на класа System.Console в стандартната .NET API документация (MSDN Library). <br/><br/><span class=\"tab\"></span>Упътване: Може да направите търсене в Google – това добре и често пъти е най-бързият начин да намерим документацията за даден .NET клас.<br/><br/><span class=\"tab\"></span>Решение: Описание за дадения клас може да се намери на следния линк: <a href=" + "http://msdn.microsoft.com/en-us/library/system.console%28v=vs.110%29.aspx" + " target=\"_blank\"><b><u>Console Class</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Да се намери описанието на метода System.Console.WriteLine() с различните негови възможни параметри в MSDN Library.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте същия подход като в предходната задача.<br/><br/><span class=\"tab\"></span>Решение: Описание за дадения клас може да се намери на следния линк: <a href=" + "http://msdn.microsoft.com/en-us/library/system.console.writeline%28v=vs.110%29.aspx" + " target=\"_blank\"><b><u>Console.WriteLine Method</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Да се компилира и изпълни програма за извеждане на \"Hello C#\" през командния ред (конзолата) и с помощта на Visual Studio.<br/><br/><span class=\"tab\"></span>Упътване: Създаваме файл с име HelloCSharp.cs, записваме програмата във файла, компилираме HelloCSharp.cs до файл HelloCSharp.exe и накрая изпълняваме HelloCSharp.exe<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Да се модифицира предходната програма, така че да изписва различно поздравление, например \"Добър ден!\".<br/><br/><span class=\"tab\"></span>Упътване: Използвайте кода на предходната програма и променете съобщението, което се отпечатва. Ако имате проблеми с кирилицата, сменете т. нар. System Locale с български от прозореца \"Region and Language\" в контролния панел на Windows.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Напишете програма, която изписва вашето име и фамилия на конзолата.<br/><br/><span class=\"tab\"></span>Упътване:  Потърсете как се използва метода <code>System.Console.Write()</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Напишете програма, която извежда на конзолата числата 1, 101, 1001 на нов ред.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте метода <code>System.Console.WriteLine()</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Напишете програма, която извежда на конзолата текущата дата и час.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете какви възможности предлага класа <code>System.Math</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете програма, която извежда корен квадратен от числото 12345.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете какви възможности предлага класа <code>System.DateTime</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която извежда първите 100 члена на редицата 2,  -3, 4, -5, 6, -7, 8.<br/><br/><span class=\"tab\"></span>Упътване: Опитайте се сами да научите от интернет как се ползват цикли в C#.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.   Направете програма, която прочита от конзолата вашата възраст и изписва (също на конзолата) каква ще бъде вашата възраст след 10 години.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте методите <code>System.Console.ReadLine()</code> и <code>int.Parse()</code><br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-8.jpg\"><br/><br/><hr>";
    public static string CSBul2 = "<h2>Глава 2. Примитивни типове и променливи</h2><br/><span class=\"tab\"></span>1. Декларирайте няколко променливи, като изберете за всяка една най-подходящия от типовете sbyte, byte, short, ushort, int, uint, long и ulong, за да им присвоите следните стойности: 52130, -115, 4825932, 97, -10000, 20000; 224; 970700000; 112; -44; -1000000; 1990; 123456789123456789.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете размерността на числените типове.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Кои от следните стойности може да се присвоят на променливи от тип float, double и decimal: 34.567839023; 12.345; 8923.1234857; 3456.091124875956542151256683467?<br/><br/><span class=\"tab\"></span>Упътване: Имайте предвид броя символи след десетичния знак. Направете справка в таблицата с размерите на типовете float, double и decimal.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Напишете програма, която изчислява вярно променливи с плаваща запетая с точност до 0.000001.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте типа данни decimal.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Инициализирайте променлива от тип int със стойност 256 в шестна­десетичен формат (256 е 100 в бройна система с основа 16).<br/><br/><span class=\"tab\"></span>Упътване: Вижте секцията за целочислени литерали. За да преобразувате лесно числата в различна бройна система използвайте вградения в Windows калкулатор. За шестнайсетично представяне на литерал използвайте префикса 0x.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Декларирайте променлива от тип char и присвоете като стойност символа който има Unicode код 72 (използвайте калкулатора на Windows за да намерите шестнайсетичното представяне на 72). <br/><br/><span class=\"tab\"></span>Упътване: Прочетете за целочислени литерали.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Декларирайте променлива isMale от тип bool и присвоете стойност на последната в зависимост от вашия пол.<br/><br/><span class=\"tab\"></span>Упътване:  Прочетете за булеви променливи.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Декларирайте две променливи от тип string със стойности \"Hello\" и \"World\". Декларирайте променлива от тип object. Присвоете на тази променлива стойността, която се получава от конкатенацията на двете стрингови променливи (добавете интервал, ако е необходимо). Отпе­чатайте променливата от тип object.<br/><br/><span class=\"tab\"></span>Упътване: Вижте секциите за символни низове и за обектен тип данни.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Декларирайте две променливи от тип string и им присвоете стойности \"Hello\" и \"World\". Декларирайте променлива от тип object и и присвоете стойността на конкатенацията на двете променливи от тип string (не изпускайте интервала по средата). Декларирайте трета променлива от тип string и я инициализирайте със стойността на променливата от тип object ( трябва да използвате type casting).<br/><br/><span class=\"tab\"></span>Упътване: Прочетете за символни низове и за обектен тип данни.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Декларирайте две променливи от тип string и им присвоете стойност \"The \"use\" of quotations causes difficulties.\" (без първите и последни кавички). В едната променлива използвайте quoted string, а в другата не го използвайте.<br/><br/><span class=\"tab\"></span>Упътване: Прочетете за символни литерали. Необходимо е да използвате символа за escaping (наклонена черта).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която принтира фигура във формата на сърце със знака \"o\".<br/><br/><span class=\"tab\"></span>Упътване: Използвайте Console.Writeline(…) като използвате само символа ‘о’ и интервали.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Напишете програма, която принтира на конзолата равнобедрен триъгълник, като страните му са очертани от символа звездичка \"©\".<br/><br/><span class=\"tab\"></span>Упътване: Използвайте Console.Writeline(…) като използвате само знака © и интервали. Използвайте Windows Character Map, за да намерите Unicode кода на знака \"©\".<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Фирма, занимаваща се с маркетинг, иска да пази запис с данни на нейните служители. Всеки запис трябва да има следната характе­ристика – първо име, фамилия, възраст, пол (‘м’ или ‘ж’) и уникален номер на служителя (27560000 до 27569999). Декларирайте необходи­мите променливи, нужни за да се запази информацията за един служи­тел, като използвате подходящи типове данни и описателни имена.<br/><br/><span class=\"tab\"></span>Упътване: За имената използвайте тип string, за пола използвайте тип char (имаме само един символ м/ж), а за уникалния номер и възрастта използвайте подходящ целочислен тип.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Декларирайте две променливи от тип int. Задайте им стойности съответно 5 и 10. Разменете стойностите им и ги отпечатайте.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте трета временна променлива за размяната на променливи. За целочислените променливи е възможно и друго решение, което не използва трета променлива.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-13.jpg\"><br/><br/><hr>";
    public static string CSBul3 = "<h2>Глава 3. Оператори и изрази</h2><br/><span class=\"tab\"></span>1. Напишете израз, който да проверява дали дадено цяло число е четно или нечетно.<br/><br/><span class=\"tab\"></span>Упътване: Вземете остатъкът от деленето на числото на 2 и проверете дали е 0 или 1 (съответно числото е четно или нечетно). Използвайте оператора % за пресмятане на остатък от целочислено деление.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Напишете булев израз, който да проверява дали дадено цяло число се дели на 5 и на 7 без остатък.<br/><br/><span class=\"tab\"></span>Упътване: Ползвайте логическо \"И\" (оператора &&) и операцията % за остатък при деление. Можете да решите задачата и чрез само една проверка – за деление на 35 (помислете защо).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Напишете израз, който да проверява дали третата цифра (отдясно на ляво) на дадено цяло число е 7.<br/><br/><span class=\"tab\"></span>Упътване: Разделете числото на 100 и го запишете в нова променлива. Нея разделете на 10 и вземете остатъкът. Остатъкът от делението на 10 е третата цифра от първоначалното число. Проверете равна ли е на 7.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Напишете израз, който да проверява дали третия бит на дадено число е 1 или 0.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте побитово \"И\" върху числото и число, което има 1 само в третия си бит (т.е. числото 8, ако броенето на битовете започне от 0). Ако върнатият резултат е различен от 0, то третия бит е 1.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете израз, който изчислява площта на трапец по дадени a, b и h.<br/><br/><span class=\"tab\"></span>Упътване: Формула за лице на трапец: S = (a + b) / 2 * h.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Напишете програма, която за подадени от потребителя дължина и височина на право­ъгълник, пресмята и отпечатва на конзолата неговия периметър и лице.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет как се въвеждат цели числа от конзолата и използвайте формулата за лице на правоъгълник.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Силата на гравитационното поле на Луната е приблизително 17% от това на Земята. Напишете програма, която да изчислява тежестта на човек на Луната, по дадената тежест на Земята.<br/><br/><span class=\"tab\"></span>Упътване: Прочетете число от конзолата, след което го умножете по 0.17 и го отпечатайте.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Напишете програма, която проверява дали дадена точка О (x, y) е вътре в окръжността К ((0,0), 5). Пояснение: точката (0,0) е център на окръжността, а радиусът й е 5.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте питагоровата теорема a2 + b2 = c2. За да е точката вътре в кръга, то x*x + y*y следва да е по-малко или равно на 5.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете програма, която проверява дали дадена точка О (x, y) е вътре в окръжността К ((0,0), 5) и едновременно с това извън право­ъгълника ((-1, 1), (5, 5). Пояснение: правоъгълникът е зададен чрез координатите на горния си ляв и долния си десен ъгъл.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте кода от предходната задача и добавете проверка за правоъгълника. Една точка е вътре в даден правоъгълник със стени успоредни на координатните оси, когато е вдясно от лявата му стена, вляво от дясната му стена, надолу от горната му стена и нагоре от долната му стена.<br/><br/><span class=\"tab\"></span>Решение: <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която приема за вход четирицифрено число във формат abcd  (например числото 2011) и след това извършва следните действия върху него:<br/><span class=\"tab\"></span>-Пресмята сбора от цифрите на числото (за нашия пример 2+0+1+1 = 4).<br/><span class=\"tab\"></span>-Разпечатва на конзолата цифрите в обратен ред: dcba (за нашия пример резултатът е 1102).<br/><span class=\"tab\"></span>-Поставя последната цифра, на първо място: dabc (за нашия пример резултатът е 1201).<br/><span class=\"tab\"></span>-Разменя мястото на втората и третата цифра: acbd (за нашия пример резултатът е 2101).<br/><br/><span class=\"tab\"></span>Упътване: За да вземете отделните цифри на числото, можете да го делите на 10 и да взимате остатъка при деление на 10 последователно 4 пъти.<br/><br/><span class=\"tab\"></span>Решение: <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Дадено е число n и позиция p. Напишете поредица от операции, които да отпечатат стойността на бита на позиция p от числото n (0 или 1). Пример: n=35, p=5 -> 1. Още един пример: n=35, p=6 -> 0.<br/><br/><span class=\"tab\"></span>Упътване:  Ползвайте побитови операции.<br/><br/><span class=\"tab\"></span>Решение: <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Напишете булев израз, който проверява дали битът на позиция p на цялото число v има стойност 1. Пример v=5, p=1 -> false.<br/><br/><span class=\"tab\"></span>Упътване: Задачата е аналогична на предната.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Дадено е число n, стойност v (v = 0 или 1) и позиция p. Напишете поредица от операции, които да променят стойността на n, така че битът на позиция p да има стойност v. Пример n=35, p=5, v=0 -> n=3. Още един пример: n=35, p=2, v=1 -> n=39.<br/><br/><span class=\"tab\"></span>Упътване: Ползвайте побитови операции, по аналогия със задача 11.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-13.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Напишете програма, която проверява дали дадено число n (1 < n < 100) е просто (т.е. се дели без остатък само на себе си и на единица).<br/><br/><span class=\"tab\"></span> Упътване: Прочетете за цикли в Интернет. Използвайте цикъл и проверете числото за делимост на всички числа от 1 до корен квадратен от числото. В конкретната задача, тъй като ограничението е само до 100, можете предварително да намерите простите числа от 1 до 100 и да направите проверки дали даденото число n e равно на някое от тях.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-14.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. Напишете програма, която разменя стойностите на битовете на позиции 3, 4 и 5 с битовете на позиции 24, 25 и 26 на дадено цяло положително число.<br/><br/><span class=\"tab\"></span>Упътване: За решението на тази задача използвайте комбинация от задачите за взимане и установяване на бит на определена позиция.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2015/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Напишете програма, която разменя битовете на позиции {p, p+1, …, p+k-1) с битовете на позиции {q, q+1, …, q+k-1} на дадено цяло положително число.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте предната задача и прочетете в интернет как се работи с цикли и масиви (в които да запишете битовете).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSBul4 = "<h2>Глава 4. Вход и изход от конзолата</h2><br/><span class=\"tab\"></span>1. Напишете програма, която чете от конзолата три числа от тип int и отпечатва тяхната сума.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте методите Console.ReadLine() и Int32.Parse().<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Напишете програма, която чете от конзолата радиуса \"r\" на кръг и отпечатва неговия периметър и обиколка.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте константата Math.PI и добре известните формули от планиметрията.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Дадена фирма има име, адрес, телефонен номер, факс номер, уеб сайт и мениджър. Мениджърът има име, фамилия и телефонен номер. Напишете програма, която чете информацията за фирмата и нейния мениджър и я отпечатва след това на конзолата.<br/><br/><span class=\"tab\"></span>Упътване: Форматирайте текста с Write(…) или WriteLine(…).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Напишете програма, която отпечатва три числа в три виртуални колони на конзолата. Всяка колона трябва да е с широчина 10 символа, а числата трябва да са ляво подравнени. Първото число трябва да е цяло число в шестнадесетична бройна система, второто да е дробно положи­телно, а третото – да е дробно отрицателно. Последните две числа да се закръглят до втория знак след десетичната запетая.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте форматиращите настройки, предоставени от съставното форматиране и метода Console.WriteLine().<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете програма, която чете от конзолата две цели числа (int) и отпечатва, колко числа има между тях, такива, че остатъкът им от деленето на 5 да е 0. Пример: в интервала (17, 25) има 2 такива числа.<br/><br/><span class=\"tab\"></span>Упътване: Има два подхода за решаване на задачата:<br/><span class=\"tab\"></span><span class=\"tab\"></span>Първи подход: Използват се математически хитрини за оптимизирано изчисляване, базирани на факта, че всяко пето число се дели на 5.<br/><span class=\"tab\"></span><span class=\"tab\"></span>Вторият подход е по-лесен, но работи по-бавно. Чрез for цикъл може да се провери всяко число в дадения интервал. За целта трябва да прочетете от Интернет как се използва for цикъл.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Напишете програма, която чете две числа от конзолата и отпечатва по-голямото от тях. Решете задачата без да използвате условни конструкции.<br/><br/><span class=\"tab\"></span>Упътване: По-голямото от двете числа можете да намерите с функцията Math.Max(a, b), а по-малкото с Math.Min(a, b).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Напишете програма, която чете пет числа и отпечатва тяхната сума. При невалидно въведено число да се подкани потребителя да въведе друго число.<br/><br/><span class=\"tab\"></span>Упътване: Можете да прочетете числата в пет различни променливи и накрая да ги сумирате. При парсване на поредното число използвайте условно парсване с TryParse(…). При въведено невалидно число повторете четенето на число. Можете да сторите това чрез while цикъл с подходящо условие за изход. За да няма повторение на код, можете да раз­гледате конструк­цията за цикъл \"for\".<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Напишете програма, която чете пет числа от конзолата и отпечатва най-голямото от тях.<br/><br/><span class=\"tab\"></span>Упътване: Трябва да използвате конструкцията за сравнение \"if\", за която можете да прочетете в Интернет.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете програма, която чете коефициентите a, b и c от конзолата и решава уравнението: ax2+bx+c=0. Програмата трябва да принтира реалните решения на уравнението на конзолата.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте добре познатия метод за решаване на квадратни уравнения. Разгледайте внимателно всички възможни случаи.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която прочита едно цяло число n от конзолата. След това прочита още nна брой числа от конзолата и отпечатва тяхната сума.<br/><br/><span class=\"tab\"></span>Упътване: Четете числата едно след друго и натрупвайте тяхната сума в променлива, която накрая изведете на конзолата. <br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Напишете програма, която прочита цяло число n от конзолата и отпечатва на конзолата всички числа в интервала [1…n], всяко на отделен ред.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте комбинация от цикли и методите Console.ReadLine(),Console.WriteLine() и Int32.Parse().<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Напишете програма, която отпечатва на конзолата първите 100 числа от редицата на Фибоначи: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ...<br/><br/><span class=\"tab\"></span>Упътване: За решение на задачата използвайте 2 временни променливи, в които да пазите последните 2 пресметнати стойности и с цикъл пресмятайте останалите (всяко следващо число в редицата е сума от последните две).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Напишете програма, която пресмята сумата (с точност до 0.001):1 + 1/2 - 1/3 + 1/4 - 1/5 + ...<br/><br/><span class=\"tab\"></span>Упътване: Натрупвайте сумата в променлива с цикъл и пазете старата сума, докато разликата между двете суми стане по-малка от точността (0.001).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-13.jpg\"><br/><br/><hr>";
    public static string CSBul5 = "<h2>Глава 5. Условни конструкции</h2><br/><span class=\"tab\"></span>1. Да се напише <code>if</code>-конструкция, която проверява стойността на две целочислени променливи и разменя техните стойности, ако стойността на първата променлива е по-голяма от втората.<br/><br/><span class=\"tab\"></span>Упътване: Прочетете за if конструкции.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Напишете програма, която показва знака (+ или -) от произведението на три реални числа, без да го пресмята. Използвайте последователност от <code>if</code> оператори.<br/><br/><span class=\"tab\"></span>Упътване: Множество от ненулеви числа имат положително произведение, ако отрицателните сред тях са четен брой. Ако отрицателните числа в множеството са нечетен брой, произведението е отрицателно. Ако някое от числата е нула, произведението е нула.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%202/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Напишете програма, която намира най-голямото по стойност число, измежду три дадени числа.<br/><br/><span class=\"tab\"></span>Упътване: Можете да използвате вложени <code>if</code> конструкции. <br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Сортирайте 3 реални числа в намаляващ ред. Използвайте вложени <code>if</code> оператори.<br/><br/><span class=\"tab\"></span>Упътване: Първо намерете най-малкото от трите числа, след това го разменете с първото. После проверете дали второто е по-голямо от третото и ако е така, ги разменете.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете програма, която за дадена цифра (0-9), зададена като вход, извежда името на цифрата на български език.<br/><br/><span class=\"tab\"></span>Упътване: Най-подходящо е да използвате <code>switch</code> конструкция.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Напишете програма, която при въвеждане на коефициентите (a, b и c) на квадратно уравнение: ax2+bx+c, изчислява и извежда неговите реални корени (ако има такива). Квадратните уравнения могат да имат 0, 1 или 2 реални корена.<br/><br/><span class=\"tab\"></span>Упътване: Вижте начина за решаване на квадратно уравнение.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Напишете програма, която намира най-голямото по стойност число измежду дадени 5 числа.<br/><br/><span class=\"tab\"></span>Упътване:  Използвайте вложени <code>if</code> конструкции. Можете да използвате конструкцията за цикъл <code>for</code>, за която можете да прочетете в Интернет.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Напишете програма, която по избор на потребителя прочита от конзолата променлива от тип <code>int</code>, <code>double</code> или <code>string</code>. Ако променливата е <code>int</code> или <code>double</code>, трябва да се увеличи с 1. Ако променливата е <code>string</code>, трябва да се прибави накрая символа \"*\". Отпечатайте получения резултат на конзолата. Използвайте <code>switch</code> конструкция.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте входна променлива, която да показва от какъв тип ще е входа, т.е. при въвеждане на 0 типа е <code>int</code>, при 1 е <code>double</code> и при 2 е <code>string</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Дадени са пет цели числа. Напишете програма, която намира онези подмножества от тях, които имат сума 0. Примери:<br/><span class=\"tab\"></span>-  Ако са дадени числата {3, -2, 1, 1, 8}, сумата на -2, 1 и 1 е 0. <br/><span class=\"tab\"></span>-Ако са дадени числата {3, 1, -7, 35, 22}, няма подмножества със сума 0.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте вложени <code>if</code> конструкции или последователност от сравнения, за да проверите сумите на всичките 15 подмножества на дадените числа (без празното).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която прилага бонус точки към дадени точки в интервала [1..9] чрез прилагане на следните правила: <br/><span class=\"tab\"></span>-  Ако точките са между 1 и 3, програмата ги умножава по 10. <br/><span class=\"tab\"></span>-  Ако точките са между 4 и 6, ги умножава по 100. <br/><span class=\"tab\"></span>-  Ако точките са между 7 и 9, ги умножава по 1000. <br/><span class=\"tab\"></span>-  Ако точките са 0 или повече от 9, се отпечатва съобщение за грешка.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте <code>switch</code> конструкция и накрая изведете като резултат на конзолата пресметнатите точки.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%205%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Напишете програма, която преобразува дадено число в интервала [0..999] в текст, съответстващ на българското произношение на числото. Примери:<br/><span class=\"tab\"></span>-  0 → \"Нула\"<br/><span class=\"tab\"></span>-  12 → \"Дванадесет\"<br/><span class=\"tab\"></span>-  98 → \"Деветдесет и осем\"<br/><span class=\"tab\"></span>-  273 → \"Двеста седемдесет и три\"<br/><span class=\"tab\"></span>-  400 → \"Четиристотин\"<br/><span class=\"tab\"></span>-  501 → \"Петстотин и едно\"<br/><span class=\"tab\"></span>-  711 → \"Седемстотин и единадесет\"<br/><br/><span class=\"tab\"></span>Упътване: Използвайте вложени <code>switch</code> конструкции. Да се обърне специално внимание на числата от 0 до 19 и на онези, в които единиците са 0.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSBul6 = "<h2>Глава 6. Цикли</h2><br/><span class=\"tab\"></span>1. Напишете програма, която отпечатва на конзолата числата от 1 до N. Числото N трябва да се чете от стандартния вход.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте <code>for</code> цикъл.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Напишете програма, която отпечатва на конзолата числата от 1 до N, които не се делят едновременно на 3 и 7. Числото N да се чете от стандартния вход.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте <code>for</code> цикъл и оператора % за намиране на остатък при целочислено деление. Едно число num не се дели на 3 и на 7 едновременно, ако <code> (num % (3*7) == 0) </code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%202/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Напишете програма, която чете от конзолата поредица от цели числа и отпечатва най-малкото и най-голямото от тях.<br/><br/><span class=\"tab\"></span>Упътване: Първо прочетете броя числа, примерно в променлива <code>n</code>. След това въведете <code>n</code> числа последователно с един <code>for</code> цикъл. Докато въвеждате всяко следващо число запазвайте в две променливи най-малкото и най-голямото число до момента.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Напишете програма, която отпечатва всички възможни карти от стан­дартно тесте карти без джокери (имаме 52 карти: 4 бои по 13 карти).<br/><br/><span class=\"tab\"></span>Упътване: Номерирайте картите от 2 до 14 (тези числа ще съответстват на картите от 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A). Номерирайте боите от 1 до 4 (1 – спатия, 2 – каро, 3 – купа, 4 – пика). Сега вече можете да завъртите 2 вложени цикъла и да отпечатате всяка от картите.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете програма, която чете от конзолата числото N и отпечатва сумата на първите N члена от редицата на Фибоначи: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ...<br/><br/><span class=\"tab\"></span>Упътване: Числата на Фибоначи започват от 0 и 1, като всяко следващо се получава като сума от предходните две. Можете да намерите първите <code>n</code> числа на Фибоначи с <code>for</code> цикъл от 1 до <code>n</code>, като на всяка итерация пресмятате поредното число, използвайки предходните две (които ще пазите в две допълнителни променливи).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span> 6. Напишете програма, която пресмята N!/K! за дадени N и K (1<K<N).<br/><br/><span class=\"tab\"></span>Упътване: Умножете числата от K+1 до N.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Напишете програма, която пресмята N!*K!/(N-K)! за дадени N и K (1<K<N).<br/><br/><span class=\"tab\"></span>Упътване:  Вариант за решение е поотделно да пресмятате всеки от факто­риелите и накрая да извършвате съответните операции с резултатите. Помис­лете как можете да оптимизирате пресмятанията, за да не смятате прекалено много факториели! При обикновени дроби, съставени от факто­риели има много възможности за съкращение на еднакви множи­тели в числителя и знаменателя. Тези оптимизации не само ще нама­лят изчисленията и ще увеличат производителността, но ще ви избавят и от препълвания в някои ситуации.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. В комбинаториката числата на Каталан (Catalan’s numbers) се изчис­ляват по следната формула:<br/><span class=\"tab\"></span><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-8.png\">, за n ≥ 0.<br/><span class=\"tab\"></span>Напишете програма, която изчислява n-тото число на Каталан за дадено n.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете програма, която за дадено цяло число n, пресмята сумата: <img src=\"/Resources/CSResources/ch6-9.png\"><br/><br/><span class=\"tab\"></span>Упътване: Задачата може да решите с <code>for</code>-цикъл за <code>k=0…n</code>, като ползвате три допълнителни променливи <code>factoriel, power</code> и <code>sum</code>, в които да пазите за <code>k</code>-тата итерация на цикъла съответно <code>k!, xk</code> и сумата на първите <code>k</code> члена на редицата. Ако реализацията ви е добра, Трябва да имате само един цикъл и не трябва да ползвате външни функции за изчис­ление на факториел и за степенуване.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която чете от конзолата положително цяло число N (N < 20) и отпечатва матрица с числа като на фигурата по-долу:<br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-10 example.jpg\"><br/><br/><span class=\"tab\"></span>Упътване: Трябва да използвате два вложени цикъла, по подобие на задачата за отпечатване на триъгълник с числа. Външният цикъл трябва да върти от 1 до N, а вътрешният – от стойността на външния до стойността на външния + N - 1.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Напишете програма, която пресмята с колко нули завършва факториелът на дадено число. Примери:<br/><span class=\"tab\"></span>N = 10 -> N! = 36288<b>00</b> -> 2<br/><span class=\"tab\"></span>N = 20 -> N! = 243290200817664<b>0000</b> -> 4<br/><br/><span class=\"tab\"></span>Упътване: Броят на нулите в края на n! зависи от това, колко пъти числото 10 е делител на факториела. Понеже произведението 1*2*3…*n има повече на брой делители 2, отколкото 5, а 10 = 2 * 5, то броят нули в n! е точно толкова, колкото са множителите със стойност 5 в произведе­нието 1*2*3….*n. Понеже всяко пето число се дели на 5, а всяко 25-то число се дели на 5 двукратно и т.н., то броя нули в n! е сумата: n/5 + n/25 + n/125 + …<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Напишете програма, която преобразува дадено число от десетична в двоична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Прочетете в Уикипедия какво представляват бройните системи.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Напишете програма, която преобразува дадено число от двоична в десетична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-13.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Напишете програма, която преобразува дадено число от десетична в шестнайсетична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-14.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. Напишете програма, която преобразува дадено число от шестнайсе­тична в десетична бройна система.<br/><br/><span class=\"tab\"></span>Упътване:  Погледнете предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-15.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Напишете програма, която по дадено число N отпечатва числата от 1 до N, разбъркани в случаен ред.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за класа <code>System.Random</code>. Прочетете в Интернет за масиви. Направете масив с N елемента и запишете в него числата от 1 до N. След това достатъчно много пъти (помислете точно колко) разменяйте двойки случайни числа от масива.<code>string</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>17. Напишете програма, която за дадени две числа, намира най-големия им общ делител.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в интернет за алгоритъма на Евклид.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-17.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>18. Напишете програма, която по дадено число n, извежда матрица във формата на спирала. Пример при n=4:<br/><span class=\"tab\"></span><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-18.jpg\"><br/><br/><span class=\"tab\"></span>Упътване: Трябва да използвате двумерен масив.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%2018/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSBul7 = "<h2>Глава 7. Масиви</h2><br/><span class=\"tab\"></span>1. Да се напише програма, която създава масив с 20 елемента от целочислен тип и инициализира всеки от елементите със стойност равна на индекса на елемента умножен по 5. Елементите на масива да се изведат на конзолата.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте  масив и <code>for</code> цикъл.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%201/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Да се напише програма, която чете два масива от конзолата и прове­рява дали са еднакви.<br/><br/><span class=\"tab\"></span>Упътване: Два масива са еднакви, когато имат еднаква дължина и стойностите на елементите в тях съответно съвпадат. Второто условие можете да проверите с <code>for</code> цикъл.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%202/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Да се напише програма, която сравнява два масива от тип char лексикографски (буква по буква) и проверява кой от двата е по-рано в лексикографската подредба.<br/><br/><span class=\"tab\"></span>Упътване: При лексикографската наредба символите се сравняват един по един като се започва от най-левия. При несъвпадащи символи по-рано е масивът, чийто текущ символ е по-рано в азбуката. При съвпадение се продължава със следващия символ вдясно. Ако се стигне до края на единия масив, по-краткият е лексикографски по-рано. Ако всички съответни символи от двата масива съвпаднат, то масивите са еднакви и никой о тях не е по-рано в лексикографската наредба.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Напишете програма, която намира максимална редица от последова­телни еднакви елементи в масив. <br/><span class=\"tab\"></span>Пример: {2, 1, 1, 2, 3, 3, <b>2, 2, 2</b>, 1} <span style=\"font-family: Wingdings;\">à</span> {2, 2, 2}.<br/><br/><span class=\"tab\"></span>Упътване: Сканирайте масива отляво надясно. Всеки път, когато текущото число е различно от предходното, от него започва нова подредица, а всеки път, когато текущото число съвпада с предходното, то е продължение на текущата подредица. Следователно, ако пазите в две променливи <code>start</code> и <code>len</code> съответно индекса на началото на текущата подредица от еднакви елементи (в началото той е 0) и дължината на текущата подредица (в началото той е 1), можете да намерите всички подредици от еднакви елементи и техните дължини. От тях лесно може да се избере най-дългата и да се запомня в две допълнителни променливи – <code>bestStart</code> и <code>bestLen</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете програма, която намира максималната редица от последова­телни нараст­ващи елементи в масив. <br/><span class=\"tab\"></span>Пример: {3, <b>2, 3, 4</b>, 2, 2, 4} <span style=\"font-family: Wingdings;\">à</span>  {2, 3, 4}.<br/><br/><span class=\"tab\"></span>Упътване: Тази задача е много подобна на предходната, но при нея даден елемент се счита за продължение на текущата редица тогава и само тогава, когато е по-голям от предхождащия го елемент.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span> 6. Напишете програма, която намира максималната подредица от нараст­ващи елементи в масив <code>arr[n]</code>. Елементите може и да не са последо­вателни. <br/><span class=\"tab\"></span>Пример: {9, 6, <b>2</b>, 7, <b>4</b>, 7, <b>6</b>, 5, <b>8</b>, 4} <span style=\"font-family: Wingdings;\">à</span>  {2, 4, 6, 8}.<br/><br/><span class=\"tab\"></span>Упътване: Задачата може да се реши с два вложени цикъла и допълнителен масив <code>len[0..n-1] </code>. Нека в стойността <code>len[i] </code> пазим дължината на най-дългата нарастваща подредица, която започва някъде в масива (не е важно къде) и завършва с елемента <code>arr[i] </code>. Тогава <code>len[0]=1</code>, a <code>len[x] </code> е максималната сума <code>max(1+len[prev]) </code>, където <code> prev < x </code> и <code>arr[prev] < arr[x] </code>. Следвайки дефиницията <code>len[0..n-1] </code> може да се пресметне с два вложени цикъла по следния начин: първият цикъл обхожда масива последователно отляво надясно с водеща променлива x. Вторият цикъл (който е вложен в първия) обхожда масива от началото до позиция <code>x-1</code> и търси елемент <code>prev</code> с максимална стойност на <code>len[prev]</code>, за който <code> arr[prev] < arr[x] </code>. След приключване на търсенето <code>len[x] </code> се инициализира с 1 + най-голямата намерена стойност на <code>len[prev] </code>или с 1, ако такава не е намерена. <br/><span class=\"tab\"></span>Описаният алгоритъм намира дължините на всички максимални нарастващи подредици, завършващи във всеки негов елемент. Най-голямата от тези стойности е дължината на най-дългата нарастваща подредица. Ако трябва да намерим самите елементи съставящи тази максимална нарастваща подредица, можем да започнем от елемента, в който тя завършва (нека той е на индекс x), да го отпечатаме и да търсим предходния елемент (<code>prev</code>). За него е в сила, че <code>prev < x</code> и <code>len[x]=1+len[prev] </code>. Така намирайки и отпечатвайки предходния елемент докато има такъв, можем да намерим елементите съставящи най-дългата нарастваща подредица в обратен ред (от последния към първия).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Да се напише програма, която чете от конзолата две цели числа N и K (K < N), и масив от N елемента. Да се намерят тези K поредни елемента, които имат максимална сума.<br/><br/><span class=\"tab\"></span>Упътване:  Можете да проверите коя от поредица от K числа има най-голяма сума като проверите сумите на всички такива поредици. Първата такава поредица започва от индекс 0 и завършва в индекс K-1 и нека тя има сума S. Тогава втората редица от K елемента започва от индекс 1 и завършва в индекс K, като нейната сума може да се получи като от S се извади нулевия елемент и се добави K-ти елемент. По същия начин може да се продължи до достигане на края на редицата.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Сортиране на масив означава да подредим елементите му в нарастващ (намаляващ) ред. Напишете програма, която сортира масив. Да се използва алгоритъма \"<code>Selection sort</code>\".<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за алгоритъма \"<code>Selection sort</code>\" и неговите реализации. Накратко идеята е да се намери най-малкият елемент, после да се сложи на първа позиция, след това да се намери втория най-малък и да се сложи на втора позиция и т.н., докато целият масив се подреди в нарастващ ред.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете програма, която намира последователност от числа, чиито сума е максимална. <br/><span class=\"tab\"></span>Пример: {2, 3, -6, -1, <b>2, -1, 6, 4</b>, -8, 8} <span style=\"font-family: Wingdings;\">à</span>  <b>11</b><br/><br/><span class=\"tab\"></span>Упътване: Тази задача има два начина, по които може да се реши. Един от тях е с пълно изчерпване, т.е. с два цикъла проверяваме всяка възможна сума. Втория е масива да се обходи само с 1 цикъл като на всяко завъртане на цикъла проверяваме дали текущата сума е по-голяма от вече намерената максимална сума. Задачата може да се реши и с техниката \"Динамично оптимиране\". Потърсете повече за нея в Интернет.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която намира най-често срещания елемент в масив. <br/><span class=\"tab\"></span>Пример: {<b>4</b>, 1, 1, <b>4</b>, 2, 3, <b>4</b>, <b>4</b>, 1, 2, <b>4</b>, 9, 3} <span style=\"font-family: Wingdings;\">à</span>  4 (среща се 5 пъти).<br/><br/><span class=\"tab\"></span>Упътване: Тази задача може да се решите по много начини. Един от тях е следният: взимате първото число и проверявате колко пъти се повтаря в масива, като пазите този брой в променлива. След всяко прочитане на еднакво число го заменяте с <code>int.MinValue</code>. След това взимате следващото и отново правите същото действие. Неговия брой среща­ния сравнявате с числото, което сте запазили в променливата и ако то е по-голямо, го присвоявате на променливата. Както се досещате, ако намерите число равно на <code>int.MinValue</code> преминавате към следващото.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Да се напише програма, която намира последователност от числа в масив, които имат сума равна на число, въведено от конзолата (ако има такава). <br/><span class=\"tab\"></span>Пример: {4, 3, 1, <b>4</b>, <b>2</b>, <b>5</b>, 8}, S=11 <span style=\"font-family: Wingdings;\">à</span> {4, 2, 5}.<br/><br/><span class=\"tab\"></span>Упътване: Задачата може да се реши с два вложени цикъла. Първият задава началната позиция за втория – от първия до последния елемент. Вторият цикъл започва от позицията, зададена от първия цикъл и сумира последова­телно числата надясно едно по едно, докато сумата не надвиши S. Ако сумата е равна на S, се запомня числото от първия цикъл (то е началото на поредицата) и числото от втория цикъл (то е краят на поредицата). <br/><span class=\"tab\"></span>Ако всички числа са положителни, съществува и много по-бърз алгоритъм. Сумирате числата отляво надясно като започвате от нулевото. В момента, в който текущата сума надвиши S, премахвате най-лявото число от редицата и го изваждате от текущата сума. Ако тя пак е по-голяма от търсената, премахвате и следващото число отляво и т.н. докато текущата сума не стане по-малка от S. След това продължавате с поредното число отдясно. Ако намерите търсената сума, я отпечатвате заедно с редицата, която я образува. Така само с едно сканиране на елементите на масива и добавяне на числа от дясната страна към текущата редица и премахване на числа от лявата й страна (при нужда), решавате задачата.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Напишете програма, която създава следните квадратни матрици и ги извежда на конзолата във форматиран вид. Размерът на матриците се въвежда от конзолата. <br/><span class=\"tab\"></span>Пример за <code>(4,4)</code>:<br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch7-12.gif\"><br/><br/><span class=\"tab\"></span>Упътване: Помислете за подходящи начини за итерация върху масивите с два вложени цикъла. <br/><span class=\"tab\"></span>За d) може да приложите следната стратегия: започвате от позиция (0,0) и се движите надолу N пъти. След това се движите надясно N-1 пъти, след това нагоре N-1 пъти, след това наляво N-2 пъти, след това надолу N-2 пъти и т.н. При всяко преместване слагате в клетката, която напускате поредното число 1, 2, 3, ..., N.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012/Program.cs" + " target=\"_blank\"><b><u>Link 12a</u></b></a><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012b/Program.cs" + " target=\"_blank\"><b><u>Link 12b</u></b></a><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012c/Program.cs" + "target=\"_blank\"><b><u>Link 12c</u></b></a><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012d/Program.cs" + "target=\"_blank\"><b><u>Link 12d</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Да се напише програма, която създава правоъгълна матрица с размер n на m. Размерността и елементите на матрицата да се четат от конзолата. Да се намери подматрицата с размер <code>(3,3)</code>, която има максимална сума. <br/><br/><span class=\"tab\"></span>Упътване: Погледнете предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2013/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Да се напише програма, която намира най-дългата последователност от еднакви stringелементи в матрица. Последователност в матрица дефинираме като елементите са на съседни и са на същия ред, колона или диагонал. <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch7-14.jpeg\"><br <br/><br/><span class=\"tab\"></span>Упътване: Задача може да се реши, като се провери за всеки елемент дали като тръгнем по диагонал, надолу или надясно, ще получим поредица. Ако получим поредица проверяваме дали тази поредица е по дълга от предходната най-дълга.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2014/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. Да се напише програма, която създава масив с всички букви от латинската азбука. Да се даде възможност на потребител да въвежда дума от конзолата и в резултат да се извеждат индексите на буквите от думата.<br/><br/><span class=\"tab\"></span>Упътване:  Задачата може да решите с масив и два вложени <code>for</code> цикъла (по буквите на думата и по масива за всяка буква). Задачата има и хитро решение без масив: индексът на дадена главна буква <code>ch</code> от латинската азбука може да се сметне чрез израза: <code> (int) ch – (int) 'A'</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2015/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Да се реализира двоично търсене (<code>binary search</code>) в <b>сортиран</b> целочислен масив.<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за алгоритъма \"<code>binary search</code>\". Какво трябва да е изпълнено, за да използваме този алгоритъм?.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>17. Напишете програма, която сортира целочислен масив по алгоритъма \"<code>merge sort</code>\".<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за алгоритъма \"<code>merge sort</code>\" и негови реализации.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2017/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>18. Напишете програма, която сортира целочислен масив по алгоритъма \"<code>quick sort</code>\".<br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за алгоритъма \"<code>quick sort</code>\" и негови реализации.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2018/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>19. Напишете програма, която намира всички прости числа в диапазона [1…10 000 000]. <br/><br/><span class=\"tab\"></span>Упътване: Потърсете в Интернет информация за \"<code>Sieve of Erathostenes</code>\" (Решетото на Ератостен, учено в часовете по математика).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2019/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>20. Напишете програма, която по дадени N числа и число S, проверявадали може да се получи сума равна на S с използване на подмасив от N-те числа (не непременно последователни).<br/><span class=\"tab\"></span>Пример: {2, 1, 2, 4, 3, 5, 2, 6}, S = 14 <span style=\"font-family: Wingdings;\">à</span> yes (1 + 2 + 5 + 6 = 14)<br/><br/><span class=\"tab\"></span>Упътване: Образувайте всички възможни суми по следния алгоритъм: взимате първото число и го маркирате като \"възможна сума\". След това взимате следващото подред число и за всяка вече получена \"възможна сума\" маркирате като възможна сумата на всяка от тях с поредното число. В момента, в който получите числото <code>S</code>, спирате с образуването на сумите. Можете да си пазите \"възможните суми\" или в булев масив където всеки индекс е някоя от сумите, или с по-сложна структура от данни (като <code>Set</code> например).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2020/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>21. Напишете програма, която по дадени <code>N</code>, <code>K</code> и <code>S</code>, намира <code>К</code> на брой елементи измежду <code>N</code>-те числа, чиито сума е точно <code>S</code> или показва, че това е невъзможно.<br/><br/><span class=\"tab\"></span>Упътване: Подобна на задача 20 с тази разлика, че ако сумата е равна на <code>S</code>, но броя елементи е различен от К, продължаваме да търсим. Помислете как да пазите броя числа, с които сте получили определена сума.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2021/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>22. Напишете програма, която прочита от конзолата масив от цели числа и премахва минимален на брой числа, така че останали числа да са сортирани в нарастващ ред. Отпечатайте резултата.<br/><span class=\"tab\"></span>Пример: {6, <b>1</b>, 4, <b>3</b>, 0, <b>3</b>, 6, <b>4</b>, <b>5</b>} <span style=\"font-family: Wingdings;\">à</span> {1, 3, 3, 4, 5}<br/><br/><span class=\"tab\"></span>Упътване: Задачата може да се реши като се направи допълнителен масив със дължина броя на елементите. В този масив ще пазим текущата най-дълга редица с край елемента на този индекс.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2022/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>23. Напишете програма, която прочита цяло число N от конзолата и отпечатва всички пермутации на числата [1…N]. <br/><span class=\"tab\"></span>Пример:  N = 3 <span style=\"font-family: Wingdings;\">à</span> {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}<br/><br/><span class=\"tab\"></span>Упътване: Задачата може да се реши с рекурсия. Напишете подходяща рекурсия и всеки път променяме позицията на всеки елемент.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2023/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSBul8 = "<h2>Глава 8. Бройни системи</h2><br/><span class=\"tab\"></span>1. Превърнете числата 151, 35, 43 и 251 в двоична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте методите за превръщане от една бройна система в друга. Можете да сверите резултатите си с калкулатора на Windows, който поддържа работа с бройни системи след превключване в режим \"Scientific\".<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Превърнете числото 1111010110011110(2) в шестнадесетична и в десетична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете упътването за предходната задача.<br/><br/><span class=\"tab\"></span>Решение:  <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span></span>3. Превърнете шестнайсетичните числа 2A3E, FA, FFFF, 5A0E9 в двоична и десетична бройна система.<br/><br/><span class=\"tab\"></span>Упътване: Погледнете упътването за предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span></span>4. Да се напише програма, която преобразува десетично число в двоично.<br/><br/><span class=\"tab\"></span>Упътване: Правилото е \"делим на 2 и долепяме остатъците в обратен ред\". За делене с остатък използваме оператора %.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Да се напише програма, която преобразува двоично число в десе­тично.<br/><br/><span class=\"tab\"></span>Упътване: Започнете от сума 0. Умножете най-десния бит с 1 и го прибавете към сумата. Следващия бит вляво умножете по 2 и добавете към сумата. Следващия бит отляво умножете по 4 и добавете към сумата и т.н.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Да се напише програма, която преобразува десетично число в шестнадесетично.<br/><br/><span class=\"tab\"></span>Упътване:  Правилото е \"делим на основата на системата (16) и долепяме остатъ­ците в обратен ред\". Трябва да си напишем логика за отпечатване на шестнайсетична цифра по дадена стойност между 0 и 15.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Да се напише програма, която преобразува шестнадесетично число в десетично.<br/><br/><span class=\"tab\"></span>Упътване: Започнете от сума 0. Умножете най-дясната цифра с 1 и я прибавете към сумата. Следващата цифра вляво умножете по 16 и я добавете към сумата. Следващата цифра вляво умножете по 16*16 и я добавете към сумата и т.н. до най-лявата шестнайсетична цифра.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Да се напише програма, която преобразува шестнадесетично число в двоично.<br/><br/><span class=\"tab\"></span>Упътване: Ползвайте бързия начин за преминаване между шестнайсетична и двоична бройна система (всяка шестнайсетична цифра съответства на 4 двоични бита).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Да се напише програма, която преобразува двоично число в шестна­десетично.<br/><br/><span class=\"tab\"></span>Упътване: Ползвайте бързия начин за преминаване между двоична и шестнайсе­тична бройна система (всяка шестнайсетична цифра съответства на 4 двоични бита).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Да се напише програма, която преобразува двоично число в десетично по схемата на Хорнер.<br/><br/><span class=\"tab\"></span>Упътване: Приложете директно схемата на Хорнер.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.  Да се напише програма, която преобразува римските числа в арабски.<br/><br/><span class=\"tab\"></span>Упътване: Сканирайте цифрите на римското число отляво надясно и ги добавяйте към сума, която първоначално е инициализирана с 0. При обработката на всяка римска цифра я взимайте с положителен или отрицателен знак в зависимост от следващата цифра (дали има по-малка или по-голяма десетична стойност).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12.  Да се напише програма, която преобразува арабските числа в римски.<br/><br/><span class=\"tab\"></span>Упътване: Имаме абсолютно аналогични съответствия на числата 10, 20, ..., 90 с тяхното представяне с римските цифри \"X\", \"L\" и \"C\", нали? Имаме аналогични съответствия между числата 100, 200, ..., 900 и тяхното представяне с римските цифри \"C\", \"D\" и \"M\" и т.н. <br/><span class=\"tab\"></span>Сега сме готови да преобразуваме числото N в римска бройна система. То трябва да е в интервала [1...3999], иначе съобщаваме за грешка. Първо отделяме хилядите (N / 1000) и ги заместваме с римския им еквивалент. След това отделяме стотиците ((N / 100) % 10) и ги заместваме с римския им еквивалент и т.н.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2012/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Да се напише програма, която по зададени N, S, D преобразува числото N от бройна система с основа S към бройна система с основа D.<br/><br/><span class=\"tab\"></span>Упътване: Можете да прехвърлите числото от бройна система с онова S към бройна система с онова 10, а после от бройна система с основа 10 към бройна система с онова D.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2013/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSBul9 = "<h2>Глава 9. Методи</h2><br/><span class=\"tab\"></span>1. Напишете метод, който при подадено име отпечатва в конзолата <code>\"Hello, <name>!\"</code> (например <code>\"Hello, Peter!\" </code>). <br/><br/><span class=\"tab\"></span>Упътване: Използвайте метод с параметър <code>string</code>. Ако ви е интересно, вместо да правите програма, която да тества дали даден метод работи коректно, можете да потърсите в Интернет информация за \"unit testing\" и да си напишете собствени unit тестове върху методите, които създавате. За всички добри софтуерни продукти се пишат unit тестове.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch9-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Създайте метод <code>GetMax()</code> с два целочислени (<code>int</code>) параметъра, който връща по-голямото от двете числа. Напишете програма, която прочита три цели числа от конзолата и отпечатва най-голямото от тях, изпол­звайки метода <code>GetMax()</code>.<br/><br/><span class=\"tab\"></span>Упътване: Използвайте свойството <code>Max(a, b, c) = Max(Max(a, b), c)</code>.<br/><br/><span class=\"tab\"></span>Решение:  <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%202/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Напишете метод, който връща английското наименование на послед­ната цифра от дадено число. Примери: за числото 512 отпечатва \"<code>two</code>\"; за числото 1024 – \"<code>four</code>\".<br/><br/><span class=\"tab\"></span>Упътване: Използвайте остатъка при деление на 10 и <code>switch</code> конструкцията.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Напишете метод, който намира колко пъти дадено число се среща в даден масив. Напишете програма, която проверява дали този метод работи правилно.<br/><br/><span class=\"tab\"></span>Упътване: Методът трябва да приема като параметър масив от числа (<code>int[]</code>) и търсеното число (<code>int</code>).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Напишете метод, който проверява дали елемент, намиращ се на дадена позиция от масив, е по-голям, или съответно по-малък от двата му съседа. Тествайте метода дали работи коректно.<br/><br/><span class=\"tab\"></span>Упътване: Елементите на първа и последна позиция в масива, ще бъдат сравнявани съответно само с десния и левия си съсед.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Напишете метод, който връща позицията на първия елемент на масив, който е по-голям от двата свои съседи едновременно, или -1, ако няма такъв елемент.<br/><br/><span class=\"tab\"></span>Упътване:  Модифицирайте метода, имплементиран в предходната задача.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Напишете метод, който отпечатва цифрите на дадено десетично число в обратен ред. Например 256, трябва да бъде отпечатано като 652.<br/><br/><span class=\"tab\"></span>Упътване: Има два начина: <br/><span class=\"tab\"></span>Първи начин: Нека числото е <code>num</code>. Докато <code>num ≠ 0</code> отпечатваме последната му цифра (<code>num % 10</code>) и след това разделяме <code>num</code> на 10. <br/><span class=\"tab\"></span>Втори начин: преобразуваме числото в <code>string</code> и го отпечатваме отзад напред чрез <code>for</code> цикъл.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Напишете метод, който пресмята сумата на две цели положителни цели числа. Числата са представени като масив от цифрите си, като последната цифра (единиците) са записани в масива под индекс 0. Направете така, че метода да работи за числа с дължина до 10 000 цифри.<br/><br/><span class=\"tab\"></span>Упътване: Трябва да имплементирате собствен метод за умножение на големи числа. На нулева позиция в масива пазете единиците, на първа позиция – десетиците и т.н. Когато събирате 2 големи числа, единиците на сумата ще е (<code>firstNumber[0] + secondNumber[0]) % 10</code>, десетиците ще са равни на (<code>firstNumber[1] + secondNumber[1]) % 10 + (firstNumber[0] + secondNumber[0])/10</code> и т.н.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Напишете метод, който намира най-големия елемент в част от масив. Използвайте метода за да сортирате възходящо/низходящо даден масив.<br/><br/><span class=\"tab\"></span>Упътване: Първо напишете метод, който намира максималния елемент в целия масив, и след това го модифицирайте да намира такъв елемент от даден интервал.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Напишете програма, която пресмята и отпечатва <code>n! </code> за всяко n в интервала [1…100].<br/><br/><span class=\"tab\"></span>Упътване: Трябва да имплементирате собствен метод за умножение на големи цели числа, тъй като 100! не може да се събере в <code>long</code>. Можете да представите числата в масив в обратен ред, с по една цифра във всеки елемент. Например числото 512 може да се представи като {2, 1, 5}. След това умножението можете да реализирате, както сте учили в училище (умножавате цифра по цифра и събирате резултатите с отместване на разрядите). <br/><span class=\"tab\"></span>Друг, по-лесен вариант да работите с големи числа като 100!, е чрез библиотеката <code>System.Numerics.dll</code>, която можете да използвате в проектите си като преди това добавите референция към нея. Потърсете информация в Интернет как да използвате библиотеката и класът <code>System.Numerics.BigInteger</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.  Напишете програма, която решава следните задачи: <br/><span class=\"tab\"></span>-     Обръща последователността на цифрите на едно число. <br/><span class=\"tab\"></span>-     Пресмята средното аритметично на дадена поредица от числа. <br/><span class=\"tab\"></span>-     Решава линейното уравнение <code>a * x + b = 0</code>.<br/><span class=\"tab\"></span>Създайте подходящи методи за всяка една от задачите. <br/><span class=\"tab\"></span>Напишете програмата така, че на потребителя да му бъде изведено текстово меню, от което да избира коя от задачите да решава. <br/><span class=\"tab\"></span>Направете проверка на входните данни: <br/><span class=\"tab\"></span>-     Десетичното число трябва да е неотрицателно. <br/><span class=\"tab\"></span>-     Редицата не трябва да е празна. <br/><span class=\"tab\"></span>-     Коефициентът a не трябва да е 0.<br/><br/><span class=\"tab\"></span>Упътване: Създайте първо необходимите ви методи. Менюто реализирайте чрез извеждане на списък от номерирани действия (1 - обръщане, 2 - средно аритметично, 3 - уравнение) и избор на число между 1 и 3.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng1 = "<h2>Chapter 1. Introduction to Programming</h2><br/><span class=\"tab\"></span>1. Install and make yourself familiar with <b>Microsoft Visual Studio</b> and Microsoft Developer Network (<b>MSDN</b>) Library Documentation.<br/><br/><span class=\"tab\"></span>Guidelines: If you have a <b>DreamSpark account</b> (www.dreamspark.com), or your school or university offers free access to Microsoft products, install the full version of <b>Microsoft Visual Studio</b>. If you do not have the opportunity to work with the full version of Microsoft Visual Studio, you can download <b>Visual Studio Express</b> for free from the Microsoft web site; it is completely free and works well for learning purposes.<br/><br/><span class=\"tab\"></span>Solution: A free version of Visual Studio can be downloaded from the following link: <a href=" + "http://www.visualstudio.com/en-us/products/free-developer-offers-vs" + " target=\"_blank\"><b><u>Visual Studio</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Find the description of the System.Console class in the standard .NET API documentation (MSDN Library).<br/><br/><span class=\"tab\"></span>Guidelines: A Google search will  often be the fastest way to find documentation for a given .NET class.<br/><br/><span class=\"tab\"></span>Solution: Description of the following class can be found at: <a href=" + "http://msdn.microsoft.com/en-us/library/system.console%28v=vs.110%29.aspx" + " target=\"_blank\"><b><u>Console Class</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Find the description of the System.Console.WriteLine() method and its different possible parameters in the MSDN Library.<br/><br/><span class=\"tab\"></span>Guidelines: Use <b>the same approach</b> as from the previous exercise.<br/><br/><span class=\"tab\"></span>Solution: Description of the following class can be found at: <a href=" + "http://msdn.microsoft.com/en-us/library/system.console.writeline%28v=vs.110%29.aspx" + " target=\"_blank\"><b><u>Console.WriteLine Method</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. <b>Compile and execute</b> the sample program from this chapter using the command prompt (the console) and Visual Studio.<br/><br/><span class=\"tab\"></span>Guidelines: We create a file named HelloCSharp.cs, save the code in the program, compile HelloCSharp.cs to HelloCSharp.exe and execute HelloCSharp.exe<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. <b>Modify</b> the sample program to print a different greeting, for example \"Good Day!\".<br/><br/><span class=\"tab\"></span>Guidelines: Modify the program from the last solution to print a different greeting, for example “Good Day!”.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a console application that <b>prints your first and last name</b> on the console.<br/><br/><span class=\"tab\"></span>Guidelines:  Find how to use the <code>System.Console.Write()</code> method.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program that <b>prints the following numbers</b> on the console 1, 101, 1001, each on a new line.<br/><br/><span class=\"tab\"></span>Guidelines: Use the <code>System.Console.WriteLine()</code> method.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write a program that prints on the console the <b>current date and time</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  Find out what features are offered by the <code>System.Math</code> class.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a program that prints the <b>square root of 12345</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  Find out what features are offered by the <code>System.DateTime</code> class.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that prints the first 100 members of the <b>sequence</b> 2, -3, 4, -5, 6, -7, 8.<br/><br/><span class=\"tab\"></span>Guidelines: Try to learn on your own how to use <b>loops</b> in C#.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.   Write a program that reads your age from the console and prints your <b>age after 10 years</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Use the methods <code>System.Console.ReadLine()</code> and <code>int.Parse()</code><br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch1-8.jpg\"><br/><br/><hr>";
    public static string CSEng2 = "<h2>Chapter 2. Primitive Types and Variables</h2><br/><span class=\"tab\"></span>1. <b>Declare several variables</b> by selecting for each one of them the most appropriate of the types <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code> and <code>ulong</code> in order to assign them the following values: 52,130; -115; 4825932; 97; -10000; 20000; 224; 970,700,000; 112; -44; -1,000,000; 1990; 123456789123456789.<br/><br/><span class=\"tab\"></span>Guidelines: Look at the ranges of the numerical types in C#.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Which of the following values can be assigned to variables of type <code>float</code>, <code>double</code> and <code>decimal</code>: 5, -5.01, 34.567839023; 12.345; 8923.1234857; 3456.091124875956542151256683467? <br/><br/><span class=\"tab\"></span>Guidelines: Consider the number of digits after the decimal point. Refer to the table with sizes of the types <code>float</code>, <code>double</code> and <code>decimal</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write a program, which <b>compares correctly two real numbers</b> with accuracy at least <b>0.000001</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Two floating-point variables are considered equal if their difference is less than some predefined precision (e.g. <b>0.000001</b>).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. <b>Initialize</b> a variable of type int with a value of 256 in <b>hexadecimal</b> format (256 is 100 in a numeral system with base 16).<br/><br/><span class=\"tab\"></span>Guidelines: Look at the section about Integer Literals. To easily convert numbers to a different numeral system use the built-in Windows calculator. For a hexadecimal representation of the literal use prefix 0x. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Declare a variable of type <code>char</code> and assign as a value the character, which has <b>Unicode</b> code, 72 (use the Windows calculator in order to find hexadecimal representation of 72). <br/><br/><span class=\"tab\"></span>Guidelines: Read about character literals.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Declare a variable <code>isMale</code> of type <code>bool</code> and assign a value to it depending on your gender.<br/><br/><span class=\"tab\"></span>Guidelines:  Read about Boolean literals.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Declare two variables of type <code>string</code> with values \"Hello\" and \"World\". Declare a variable of type <code>object</code>. Assign to this variable the value obtained of concatenation of the two string variables (add space if necessary). Print the variable of type <code>object</code>.<br/><br/><span class=\"tab\"></span>Guidelines: Read about Strings and Object Data Type<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Declare two variables of type <code>string</code> and assign them values \"Hello\" and \"World\". Declare a variable of type <code>object</code> and assign to it the value obtained of concatenation of the two variables of type string (do not miss the space in the middle). Declare a third variable of type <code>string</code> and initialize it with the value of the variable of type <code>object</code> (you should use type casting).<br/><br/><span class=\"tab\"></span>Guidelines: Read about Strings and Object Data Type <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Declare two variables of type <code>string</code> and assign them a value “<b>The \"use\" of quotations causes difficulties.</b>” (without the outer quotes). In one of the variables use quoted string and in the other do not use it. <br/><br/><span class=\"tab\"></span>Guidelines: Read about Character Literals. It is necessary to use the <b>escaping character</b> \" or <b>verbatim strings</b>. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program to print a figure in the shape of a <b>heart</b> by the sign \"o\". <br/><br/><span class=\"tab\"></span>Guidelines: Use Console.WriteLine(…), the character 'o' and spaces. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Write a program that prints on the console isosceles triangle which sides consist of the copyright character \"©\". <br/><br/><span class=\"tab\"></span>Guidelines: Use Console.WriteLine(…), the character © and spaces. Use Windows Character Map in order to find the Unicode code of the sign \"©\".<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. A company dealing with marketing wants to keep a data record of its <b>employees</b>. Each record should have the following characteristic – first name, last name, age, gender (‘m’ or ‘f’) and unique employee number (27560000 to 27569999). <b>Declare appropriate variables</b> needed to maintain the information for an employee by using the appropriate data types and attribute names. <br/><br/><span class=\"tab\"></span>Guidelines: For the names use type <code>string</code>, for the gender use type <code>char</code> (only one char <code>m/f</code>), and for the unique number and age use some integer type. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Declare two variables of type <code>int</code>. Assign to them values 5 and 10 respectively. <b>Exchange (swap) their values</b> and print them.<br/><br/><span class=\"tab\"></span>Guidelines: Use a <b>third temporary variable</b> for exchanging the variables. To swap integer variables <b>other solutions</b> exist which do not use a third variable. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch2-13.jpg\"><br/><br/><hr>";
    public static string CSEng3 = "<h2>Chapter 3. Operators and Expressions</h2><br/><span class=\"tab\"></span>1. Write an expression that checks whether an integer is <b>odd or even</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Take the <b>remainder of dividing the number by 2</b> and check if it is 0 or 1 (respectively the number is odd or even). <b>Use % operator</b> to calculate the remainder of integer division.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Write a Boolean expression that checks whether a given integer is <b>divisible by both 5 and 7</b>, without a remainder.<br/><br/><span class=\"tab\"></span>Guidelines: Use a logical \"AND\" (&& operator) and the remainder operation % in division. You can also solve the problem by only one test: the division of 35 (think why).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write an expression that checks for a given integer if its <b>third digit</b> (right to left) is 7.<br/><br/><span class=\"tab\"></span>Guidelines: Divide the number by 100 and save it in a new variable, which then divide by 10 and take the remainder. The remainder of the division by 10 is the third digit of the original number. Check if it is equal to 7.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Write an expression that checks whether the <b>third bit</b> in a given integer is 1 or 0.<br/><br/><span class=\"tab\"></span>Guidelines: Use <b>bitwise \"AND\"</b> on the current number and the number that has 1 only in the third bit (i.e. number 8, if bits start counting from 0).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write an expression that calculates the <b>area of a trapezoid</b> by given sides <b>a</b>, <b>b</b> and height <b>h</b>.<br/><br/><span class=\"tab\"></span>Guidelines: The formula for <b>trapezoid surface</b> is: S = (a + b) * h / 2.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a program that prints on the console the <b>perimeter and the area of a rectangle</b> by given side and height entered by the user.<br/><br/><span class=\"tab\"></span>Guidelines: Search the Internet for <b>how to read integers</b> from the console and use the formula for rectangle area calculation. If you have difficulties see instructions on the next problem.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. The gravitational field of the Moon is approximately 17% of that on the Earth. Write a program that calculates the <b>weight of a man on the moon</b> by a given weight on the Earth.<br/><br/><span class=\"tab\"></span>Guidelines: <b>Read the number from the console</b>, <b>multiply it by 0.17</b> and print it. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write an expression that checks for a given point {x, y} if it is <b>within the circle</b> K[{0, 0}, R=5]. Explanation: the point {0, 0} is the center of the circle and 5 is the radius.<br/><br/><span class=\"tab\"></span>Guidelines: Use the <b>Pythagorean Theorem</b> a2 + b2 = c2. The point is inside the circle when (x*x) + (y*y) ≤ 5*5.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write an expression that checks for given point {x, y} if it is <b>within the circle</b> K[{0, 0}, R=5] and <b>out of the rectangle</b> [{-1, 1}, {5, 5}]. Clarification: for the rectangle the lower left and the upper right corners are given.<br/><br/><span class=\"tab\"></span>Guidelines: Use the code from the previous task and <b>add a check for the rectangle</b>. A point is inside a rectangle with walls parallel to the axes, when in the same time it is right of the left wall, left of the right wall, down from the top wall and above the bottom wall.<br/><br/><span class=\"tab\"></span>Solution: : <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that takes as input a <b>four-digit number</b> in format abcd (e.g. 2011) and performs the following actions:<br/><span class=\"tab\"></span>-Calculates the sum of the digits (in our example 2+0+1+1 = 4).<br/><span class=\"tab\"></span>-Prints on the console the number in reversed order: dcba (in our example 1102).<br/><span class=\"tab\"></span>-Puts the last digit in the first position: dabc (in our example 1201).<br/><span class=\"tab\"></span>-Exchanges the second and the third digits: acbd (in our example 2101).<br/><br/><span class=\"tab\"></span>Guidelines: To get the individual digits of the number you can divide by 10 and take the remainder of the division by 10 four times<br/><br/><span class=\"tab\"></span>Solution: <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. We are given number n and position p. Write a sequence of operations that prints the value of <b>the bit on the position</b> p in the number (0 or 1). Example: n=35, p=5 -> 1. Another example: n=35, p=6 -> 0.<br/><br/><span class=\"tab\"></span>Guidelines:  Use <b>bitwise operations</b><br/><br/><span class=\"tab\"></span>Solution: <a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Write a Boolean expression that checks if the bit on position p in the integer v has the value 1. Example v=5, p=1 -> false.<br/><br/><span class=\"tab\"></span>Guidelines: The task is similar to the previous one.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. We are given the number n, the value v (v = 0 or 1) and the position p. write a sequence of operations that changes the value of <b>n</b>, so the bit on the position <b>p</b> has the value of <b>v</b>. Example: n=35, p=5, v=0 -> n=3. Another example: n=35, p=2, v=1 -> n=39.<br/><br/><span class=\"tab\"></span>Guidelines: Use bitwise operations by analogy with the previous two problems.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-13.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Write a program that checks if a given number n (1 < n < 100) is a <b>prime number</b> (i.e. it is divisible without remainder only to itself and 1).<br/><br/><span class=\"tab\"></span> Guidelines: Read about <b>loops</b> in the Internet. Use a loop and check the number for divisibility by all integers from 1 to the square root of the number. Since <b>n < 100</b>, you can find in advance all prime numbers from 1 to 100 and checks the input over them. The <b>prime numbers</b> in the range [1…100] are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89 and 97.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch3-14.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. *Write a program that <b>exchanges the values of the bits</b> on positions 3, 4 and 5 with bits on positions 24, 25 and 26 of a given 32-bit unsigned integer.<br/><br/><span class=\"tab\"></span>Guidelines: Use 3 times a combination of getting and setting a bit at a given position.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2015/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Write a program that <b>exchanges bits</b> {p, p+1, …, p+k-1} with bits {q, q+1, …, q+k-1} of a given 32-bit unsigned integer.<br/><br/><span class=\"tab\"></span>Guidelines: Extend the solution of the previous problem to perform a <b>sequence of bit exchanges in a loop</b>. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%203%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng4 = "<h2>Chapter 4. Console Input and Output</h2><br/><span class=\"tab\"></span>1. Write a program that <b>reads</b> from the console <b>three numbers</b> of type int and prints their sum.<br/><br/><span class=\"tab\"></span>Guidelines: Use the methods <code>Console.ReadLine()</code> and <code>Int32.Parse()</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Write a program that <b>reads</b> from the console the <b>radius</b> \"r\" of a circle and prints its <b>perimeter and area</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Use <code>Math.PI</code> constant and the well-known <b>geometric formulas</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. A given company has name, address, phone number, fax number, web site and manager. The manager has name, surname and phone number. Write a program that <b>reads information about the company</b> and its manager and then <b>prints it</b> on the console.<br/><br/><span class=\"tab\"></span>Guidelines: Format the text with <code>Write(…)</code> or <code>WriteLine(…)</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Write a program that <b>prints three numbers in three virtual columns</b> on the console. Each column should have a width of 10 characters and the numbers should be <b>left aligned</b>. The first number should be an integer in <b>hexadecimal</b>; the second should be <b>fractional positive</b>; and the third – a <b>negative fraction</b>. The last two numbers have to be rounded to the second decimal place.<br/><br/><span class=\"tab\"></span>Guidelines: Use format strings and the method <code>Console.WriteLine()</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a program that reads from the console two integer numbers (int) and prints how many numbers between them exist, such that the remainder of their division by 5 is 0. Example: in the range (14, 25) there are 3 such numbers: 15, 20 and 25.<br/><br/><span class=\"tab\"></span>Guidelines: There are two approaches for solving the problem:<br/><span class=\"tab\"></span><span class=\"tab\"></span> <b>First approach</b>: Use mathematical tricks for optimized calculation based on the fact that <b>every fifth number is divisible by 5</b>. Think how to implement this correctly and about the borderline cases.<br/><span class=\"tab\"></span><span class=\"tab\"></span> The <b>second approach</b> is easier but it works slower. With a <code>for-</code><b>loop</b> each number within the given range can be checked. You should read on the Internet about how to use <code>for-</code>loops.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a program that reads two numbers from the console and <b>prints the greater of them</b>. Solve the problem without using conditional statements.<br/><br/><span class=\"tab\"></span>Guidelines: Since the problem requires a solution, which <b>does not use conditional statements</b>, you should use a different approach. Two possible solutions of the problem include the use of functions of class <code>Math</code>. The <b>greater</b> of the two numbers you can find with the function <code>Math.Max(a, b)</code> and the <b>smaller</b> with <code>Math.Min(a, b)</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program that <b>reads five integer numbers and prints their sum</b>. If an invalid number is entered the program should prompt the user to enter another number.<br/><br/><span class=\"tab\"></span>Guidelines: You can read the numbers in <b>five different variables</b> and finally sum them and print the obtained sum. Note that the sum of 5 <code>int</code> values may not fit in the <code>int</code> type so you should use <code>long</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write a program that reads five numbers from the console and prints the <b>greatest</b> of them.<br/><br/><span class=\"tab\"></span>Guidelines: You can use the <b>comparison statement</b> \"<code>if</code>\". You can read about it on the Internet.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a program that <b>reads</b> a, b and c from the console and calculates: <b>ax2+bx+c=0</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Use the method for calculating quadratic equations. <br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%204%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that reads an integer number n from the console. After that reads n numbers from the console and prints their <b>sum</b>.<br/><br/><span class=\"tab\"></span>Guidelines: You should use a <code>for-</code><b>loop</b>. Read the numbers one after another and accumulate their sum in a variable, which then display on the console at the end.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Write a program that reads an integer number n from the console and <b>prints all numbers in the range [1…n]</b>, each on a separate line.<br/><br/><span class=\"tab\"></span>Guidelines: Use a combination of <b>loops</b>  and the methods <code>Console.ReadLine()</code>, <code>Console.WriteLine()</code> and <code>Int32.Parse()</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Write a program that prints on the console the first 100 numbers in the <b>Fibonacci sequence</b>: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, …<br/><br/><span class=\"tab\"></span>Guidelines: For the solution of the problem use 2 temporary variables in which store the last 2 calculated values and with a loop calculate the rest (each subsequent number in the sequence is a sum of the last two). Use a <code>for-</code><b>loop</b> to implement the repeating logic.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Write a program that calculates the <b>sum</b> (with <b>precision of 0.001</b>) of the following sequence: 1 + 1/2 - 1/3 + 1/4 - 1/5 + …<br/><br/><span class=\"tab\"></span>Guidelines: Accumulate the <b>sum of the sequence</b> in a variable inside a <code>while-</code><b>loop</b>. At each step compare the old sum with the new sum. If the difference between the two sums <code>Math.Abs(current_sum – old_sum)</code> is less than the required precision (0.001), the calculation should finish because the difference is constantly decreasing and the precision is constantly increasing at each step of the loop. The expected result is <b>1.307</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch4-13.jpg\"><br/><br/><hr>";
    public static string CSEng5 = "<h2>Chapter 5. Conditional Statements</h2><br/><span class=\"tab\"></span>1. Write an <code>if</code>- statement that takes two integer variables and <b>exchanges</b> their values if the first one is greater than the second one.<br/><br/><span class=\"tab\"></span>Guidelines: Read about if-statements.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Write a program that shows the sign (+ or -) of the product of three real numbers, without calculating it. Use a sequence of <code>if</code> operators.<br/><br/><span class=\"tab\"></span>Guidelines: A multiple of non-zero numbers has a positive product, if the <b>negative multiples are even number</b>. If the count of the negative numbers is odd, the product is negative. If at least one of the numbers is zero, the product is also zero. Use a counter <code>negativeNumbersCount</code> to keep the <b>number of negative numbers</b>. Check each number whether it is negative and change the counter accordingly. If some of the numbers is 0, print “0” as result (the zero has no sign). Otherwise print “+” or “-” depending on the condition <code> (negativeNumbersCount % 2 == 0) </code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%202/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write a program that finds the <b>biggest of three integers</b>, using nested <code>if</code> statements.<br/><br/><span class=\"tab\"></span>Guidelines: Use <b>nested</b> <code>if</code>-<b>statements</b>, first checking the first two numbers then checking the bigger of them with the third.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. <b>Sort 3 real numbers</b> in descending order. Use nested <code>if</code> statements.<br/><br/><span class=\"tab\"></span>Guidelines: First <b>find the smallest</b> of the three numbers, and then <b>swap it with the first one</b>. Then check if the second is greater than the third number and if yes, swap them too.<br/>Another approach is to check all possible orders of the numbers with a series of <code>if-else</code> checks: <code>a≤b≤c, a≤c≤b, b≤a≤c, b≤c≤a, c≤a≤b</code> and <code>c≤b≤a</code>.<br/>A <b>more complicated</b> and more general solution of this problem is to put the numbers in an array and use the <code>Array.Sort(…)</code> method.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a program that asks for a digit (0-9), and depending on the input, <b>shows the digit as a word</b> in a Bulgarian or English. Use a <code>switch</code> statement.<br/><br/><span class=\"tab\"></span>Guidelines: Just use a <code>switch</code> statement to check for all possible digits.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a program that gets the coefficients <code>a, b</code> and <code>c</code> of a quadratic equation: <code>ax2 + bx + c</code>, calculates and prints its real roots (if they exist). Quadratic equations may have 0, 1 or 2 real roots.<br/><br/><span class=\"tab\"></span>Guidelines: Look for the formulas for solving a quadratic equation.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program that finds the <b>greatest of given 5 numbers</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  Use nested <code>if</code> statements. You could use the loop structure <code>for</code>, which you could read about on the Internet.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch5-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write a program that, depending on the user’s choice, inputs <code>int, double</code> or <code>string</code> variable. If the variable is <code>int</code> or <code>double</code>, the program increases it by 1. If the variable is a <code>string</code>, the program appends \"*\" at the end. Print the result at the console. Use <code>switch</code> statement.<br/><br/><span class=\"tab\"></span>Guidelines: First input a variable, which indicates what type will be the input, i.e. by entering 0 the type is <code>int</code>, by 1 is <code>double</code> and by 2 is <code>string</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. We are given 5 integer numbers. Write a program that finds those <b>subsets whose sum is 0</b>. Examples:<br/><span class=\"tab\"></span>-     If we are given the numbers {3, -2, 1, 1, 8}, the sum of -2, 1 and 1 is 0.<br/><span class=\"tab\"></span>-     If we are given the numbers {3, 1, -7, 35, 22}, there are no subsets with sum 0.<br/><br/><span class=\"tab\"></span>Guidelines: Use nested <code>if</code> statements or series of <b>31 comparisons</b>, in order to check all the sums of the 31 subsets of the given numbers (without the empty one). Note that the problem in general (with <code>N</code> numbers) is complex and using loops will not be enough to solve it.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that applies <b>bonus points</b> to given scores in the range [1…9] by the following rules:<br/><span class=\"tab\"></span>-     If the score is between 1 and 3, the program multiplies it by 10.<br/><span class=\"tab\"></span>-     If the score is between 4 and 6, the program multiplies it by 100.<br/><span class=\"tab\"></span>-     If the score is between 7 and 9, the program multiplies it by 1000.<br/><span class=\"tab\"></span>-     If the score is 0 or more than 9, the program prints an error message.<br/><br/><span class=\"tab\"></span>Guidelines: Use <code>switch</code> statement or a sequence of <code>if-else</code> constructs and at the end print at the console the calculated points.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%205%20Solution%2010" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Write a program that <b>converts a number in the range [0…999] to words</b>, corresponding to the English pronunciation. Examples:<br/><span class=\"tab\"></span>-     0 --> \"Zero\"<br/><span class=\"tab\"></span>-     12 --> \"Twelve\"<br/><span class=\"tab\"></span>-     98 --> \"Ninety eight\"<br/><span class=\"tab\"></span>-     273 --> \"Two hundred seventy three\"<br/><span class=\"tab\"></span>-     400 --> \"Four hundred\"<br/><span class=\"tab\"></span>-     501 --> \"Five hundred and one\"<br/><span class=\"tab\"></span>-     711 --> \"Seven hundred and eleven\"<br/><br/><span class=\"tab\"></span>Guidelines: Use nested <code>switch</code> statements. Pay special attention to the numbers from 0 to 19 and those that end with 0. There are <b>many special cases!</b><br/>You might benefit from using <b>methods</b> to reuse the code you write, because printing a single digit is part of printing a 2-digit number which is part of printing 3-digit number.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%205%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng6 = "<h2>Chapter 6. Loops</h2><br/><span class=\"tab\"></span>1. Write a program that prints on the console <b>the numbers from 1 to N</b>. The number <b>N</b> should be read from the standard input.<br/><br/><span class=\"tab\"></span>Guidelines: Use a <code>for</code>-loop.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Write a program that prints on the console the numbers from 1 to N, which are <b>not divisible by 3 and 7 simultaneously</b>. The number N should be read from the standard input.<br/><br/><span class=\"tab\"></span>Guidelines: Use a <code>for</code>-loop and the operator % for finding <b>the remainder</b> in integer division. A number number is not divisible by 3 and 7 simultaneously exactly when <code>(num % (3*7) == 0)</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%202/Program.cs" + "target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write a program that reads from the console a series of integers and prints the <b>smallest</b> and <b>largest</b> of them.<br/><br/><span class=\"tab\"></span>Guidelines: First <b>read the count</b> of numbers, for example in a variable <code>n</code>. Then <b>consequently enter n numbers</b> with one <code>for</code> loop. While entering each new number, save in two variables the <b>smallest</b> and the <b>largest</b> number until this moment. At the start initialize the smallest and the largest number with <code>Int32.MaxValue</code> and <code>Int32.MinValue</code> respectively.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Write a program that prints <b>all possible cards from a standard deck</b> of cards, without jokers (there are 52 cards: 4 suits of 13 cards).<br/><br/><span class=\"tab\"></span>Guidelines: <b>Number the cards</b> from 2 to 14 (these numbers will match the cards 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A). <b>Number the suits</b> from 1 to 4 (1 – club, 2 – diamond, 3 – heart and 4 – spades). Now you can use the <b>two nested loops</b> and print each of the cards with two <code>switch</code> statements.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a program that reads from the console number N and print the sum of the first N members of the <b>Fibonacci sequence</b>: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, …<br/><br/><span class=\"tab\"></span>Guidelines: <b>Fibonacci numbers</b> start from 0 and 1, each additional is obtained as the <b>sum of the previous two</b>. You can find the first <code>n</code> Fibonacci numbers with a <code>for</code>-loop from 1 to <code>n</code>, and at each iteration calculate the next number by using the previous two (which you will keep in two additional variables).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span> 6. Write a program that calculates <b>N!/K!</b> for given N and K (1<K<N).<br/><br/><span class=\"tab\"></span>Guidelines: Multiply the numbers from K+1 to N (think why this is correct).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program that calculates <b>N!*K!/(N-K)!</b> for given N and K (1<K<N).<br/><br/><span class=\"tab\"></span>Guidelines: <b>One solution</b> is to calculate separately each factorial and at the end to perform the respective operations with the results.<br/>Think how you can <b>optimize the calculations</b>, in order to not calculate too many factorials! In <b>fractions</b> of factorials there are many possibilities to <b>reduce the same factors</b> in the numerator and denominator. These optimizations will not only reduce the calculations and increase the performance but will <b>save you from overflows</b> in some situations. You might need to use arrays <code>num[0..N]</code> and <code>denum[0..n]</code> to hold the factors in the numerator and in the denominator and to <b>cancel the fraction</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. In combinatorics, the Catalan numbers are calculated by the following formula: <br/><span class=\"tab\"></span><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-8.png\">, for n ≥ 0.<br/><span class=\"tab\"></span>Write a program that calculates the n-th Catalan number by given n.<br/><br/><span class=\"tab\"></span>Guidelines: Use the same concept of <b>canceling the faction of simple factors</b>, like you probably did in the <b>previous problem</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a program that for a given integers <b>n</b> and <b>x</b>, <b>calculates the sum</b>:  <img src=\"/Resources/CSResources/ch6-9.png\"><br/><br/><span class=\"tab\"></span>Guidelines: You can solve the problem with a <code>for</code>-loop for <code>k=0…n</code>, by using three additional variables <code>factorial, power</code> and <code>sum</code> in which you will keep for the <b>k-th</b> iteration of the loop respectively <b>k!, x-k</b> and the <b>sum of the first k members</b> of sequence. If your implementation is good, you should have only one loop and you should not use external functions to calculate factorials and to raise power.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that reads from the console a <b>positive integer number N</b> (N < 20) and prints a <b>matrix</b> of numbers as on the figures below:<br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-10 example.jpg\"><br/><br/><span class=\"tab\"></span>Guidelines: You should use <b>two nested loops</b>, similar to the problem \"Printing a Triangle\". The outer loop must run from 1 to N, and the inner – from the value of the outer loop to the value of the outer loop + N - 1.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-10.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Write a program that calculates with <b>how many zeroes the factorial of a given number ends</b>. Examples:<br/><span class=\"tab\"></span>N = 10 -> N! = 36288<b>00</b> -> 2<br/><span class=\"tab\"></span>N = 20 -> N! = 243290200817664<b>0000</b> -> 4<br/><br/><span class=\"tab\"></span>Guidelines: The <b>number of zeros at the end of n!</b> depends on how many times the number 10 is a divisor of the factorial. Because the product 1*2*3…*n has a greater number of divisors 2, than 5 and because 10 = 2 * 5, then the <b>number of zeros in n!</b> is exactly as many as the <b>multipliers with value 5 in the product 1 * 2 * 3 * … * n</b>. Because every fifth number is divisible by 5, and every 25th number is divisible by 5 two times, etc., the number of zeros in n! is <b>the sum: n/5 + n/25 + n/125 + …</b><br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-11.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Write a program that converts a given number <b>from decimal to binary notation</b> (numeral system).<br/><br/><span class=\"tab\"></span>Guidelines: Read in Wikipedia what <b>numeral systems</b> are.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-12.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Write a program that converts a given number <b>from binary to decimal notation</b>.<br/><br/><span class=\"tab\"></span>Guidelines: See the previous problem.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-13.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Write a program that converts a given number <b>from decimal to hexadecimal notation</b>.<br/><br/><span class=\"tab\"></span>Guidelines: See the previous problem.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-14.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. Write a program that converts a given number <b>from hexadecimal to decimal notation</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  See the previous problem.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-15.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Write a program that by a given integer <b>N</b> prints the numbers from 1 to N in <b>random order</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Search in the Internet for information about the class <code>System.Random</code>. Read in the Internet about <b>arrays</b>. Create an <b>array with N elements</b> and write in it the numbers from 1 to N. After that a few times (think exactly how many) <b>swap two random pairs</b> of elements from the array.<code>string</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>17. Write a program that given two numbers finds their <b>greatest common divisor (GCD)</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Search the Internet for the <b>Euclidean algorithm</b> for calculation the <b>greatest common divisor (CGD)</b> or read about it in Wikipedia.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-17.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>18. Write a program that for a given number n, outputs a matrix in the form of a <b>spiral</b>: Example with n=4:<br/><span class=\"tab\"></span><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch6-18.jpg\"> <br/><br/><span class=\"tab\"></span>Guidelines: You should use a <b>two-dimensional array</b> (matrix). The algorithm of <b>filling a spiral matrix</b> in not straightforward and may require a bit of thinking.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%206%20Solution%2018/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng7 = "<h2>Chapter 7. Arrays</h2><br/><span class=\"tab\"></span>1. Write a program, which creates an array of <b>20 elements of type integer</b> and initializes each of the elements with a value equals to the index of the element multiplied by 5. Print the elements to the console.<br/><br/><span class=\"tab\"></span>Guidelines: Use an <code>int[]</code> array and a<code>for</code> loop.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%201/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Write a program, which <b>reads two arrays</b> from the console and <b>checks whether they are equal</b> (two arrays are equal when they are of equal length and all of their elements, which have the same index, are equal).<br/><br/><span class=\"tab\"></span>Guidelines: Two arrays are <b>equal</b> if they have the same value for the <b>length</b> and the <b>values for their elements</b>. You can check for the second condition using a for-loop.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%202/Program.cs" + "target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write a program, which <b>compares two arrays of type char lexicographically</b> (character by character) and checks, which one is first in the lexicographical order.<br/><br/><span class=\"tab\"></span>Guidelines: In <b>lexicographic order</b> the elements are <b>compared one by one</b> starting from the very left. If the elements are not the same, the array, whose element is <b>smaller</b> (comes earlier in the alphabet), comes first. If the elements are equal, the next character is compared. If the end of one of the arrays is reached, without finding different elements, the shorter array is the smaller (comes earlier lexicographically). If all elements are equal, the arrays are <b>equal</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Write a program, which finds the maximal sequence of consecutive equal elements in an array. <br/><span class=\"tab\"></span>E.g.: {2, 1, 1, 2, 3, 3, <b>2, 2, 2</b>, 1} <span style=\"font-family: Wingdings;\">à</span>  {2, 2, 2}.<br/><br/><span class=\"tab\"></span>Guidelines: <b>Scan the array from left to right</b>. Every time when the current number is different from the one before it, a <b>new sequence starts</b>. If the current element is equal to the one before it, it is a <b>continuation of the same sequence</b>. So, if we keep the index of the <b>start position</b> of the current sequence (in the beginning it is 0) in <code>start</code> and the <b>length of the current sequence</b> (in the beginning it is 1) in <code>len</code>, we can find all sequences of equal elements and their lengths. We can easily keep the shortest one in two additional variables – <code>bestStart</code> and <code>bestLen</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a program, which finds the <b>maximal sequence</b> of consecutively placed <b>increasing integers</b>.<br/><span class=\"tab\"></span>Example: {3, 2, 3, 4, 2, 2, 4} <span style=\"font-family: Wingdings;\">à</span>  {2, 3, 4}.<br/><br/><span class=\"tab\"></span>Guidelines: This exercise is <b>very similar to the previous one</b>, but we have a continuation of the current sequence when <b>the next element is bigger</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span> 6. Write a program, which finds the <b>maximal sequence of increasing elements</b> in an array <code>arr[n]</code>. It is not necessary the elements to be consecutively placed. <br/><span class=\"tab\"></span> E.g.: {9, 6, <b>2</b>, 7, <b>4</b>, 7, <b>6</b>, 5, <b>8</b>, 4} <span style=\"font-family: Wingdings;\">à</span>  {2, 4, 6, 8}.<br/><br/><span class=\"tab\"></span>Guidelines: We can solve the problem with <b>two nested loops</b> and one more array <code>len[0…n-1]</code>. In the array <code>len[i]</code> we can keep the length of the longest consecutively increasing sequence, which starts somewhere in the array (it does not matter where exactly) and ends with the element <code>arr[i]</code>. Therefore <code>len[0]=1, len[x]</code> is the maximal sum <code>max(1 + len[prev])</code>, where <code>prev < x </code> and <code>arr[prev] < arr[x]</code>. Following the definition, we can calculate <code>len[0…n-1]</code> with two nested loops: the <b>outer loop</b> will iterate through the array <b>from left to right with</b> the loop variable <code>x</code>. The <b>inner loop</b> will iterate through the array from the start to position <code>x-1</code> and searches for the element <code>prev</code> with maximal value of <code>len[prev]</code>, where <code>arr[prev] < arr[x] </code>. After the search, we initialize <code>len[x]</code> with 1 + the biggest found value of <code>len[prev]</code> or with 1, if such a value is not found. <br/><span class=\"tab\"></span>The described algorithm <b>finds the lengths of all maximal ascending sequences</b>, which end at each of the elements. The biggest one of these values is the length of the <b>longest increasing sequence</b>. If we need to find <b>the elements themselves</b>, which compose that longest sequence, we can start from the element, where the sequence ends (at index <code>x</code>), we can print it and we can search for a previous element (<code>prev</code>). By definition <code>prev < x </code> and <code>len[x] = 1 + len[prev]</code> so we can find <code>prev</code> with a <code>for</code>-loop from 1 to <code>x-1</code>. After that we can repeat the same for <code>x=prev</code>. By finding and printing the previous element (<code>prev</code>) many times until it exists, we can find <b>the elements, which compose the longest sequence</b> in reversed order (from the last to the first).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program, which reads from the console two integer numbers <b>N</b> and <b>K</b> (K<N) and array of N integers. Find those <b>K consecutive elements</b> in the array, which have <b>maximal sum</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  <b>Find in Internet information about \"Selection sort\"</b> and its C# implementations. Briefly the idea is to find the smallest element and to place it at position 0 (through <b>swapping</b>) then to find the smallest number excluding the first and place it at position 1 and so on, until the entire array is arranged in ascending order.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. <b>Sorting an array</b> means to arrange its elements in an increasing (or decreasing) order. Write a program, which sorts an array using the algorithm \"<code>selection sort</code>\".<br/><br/><span class=\"tab\"></span>Guidelines: <b>Find in Internet information about \"Selection sort\"</b> and its C# implementations. Briefly the idea is to find the smallest element and to place it at position 0 (through <b>swapping</b>) then to find the smallest number excluding the first and place it at position 1 and so on, until the entire array is arranged in ascending order.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a program, which finds a subsequence of numbers with maximal sum. E.g.: {2, 3, -6, -1, <b>2, -1, 6, 4</b>, -8, 8} <span style=\"font-family: Wingdings;\">à</span>  <b>11</b><br/><br/><span class=\"tab\"></span>Guidelines: There are <b>two ways</b> to solve this problem. The first way is to use <b>brute force method</b>, which in this case means that using <b>two nested loops</b> we check every possible start and end and its corresponding sum. <br/><span class=\"tab\"></span>The second way is to <b>use one loop through the array</b> to scan it from left to right and sum the elements. Once we get a <b>negative sum</b>, we can <b>restart summing from the next element</b>. Think why this is correct! At each step we check if the current sum is greater than the current max.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program, which finds the <b>most frequently occurring</b> element in an array. Example: {<b>4</b>, 1, 1, <b>4</b>, 2, 3, <b>4</b>, <b>4</b>, 1, 2, <b>4</b>, 9, 3} <span style=\"font-family: Wingdings;\">à</span>  4 (5 times).<br/><br/><span class=\"tab\"></span>Guidelines: This exercise <b>can be solved in a couple of ways</b>. One of them is the following: get the first number and check how many times it is repeated in the array and store this number in a variable. After a repeated number is found we change its value to <code>int.MinValue</code>. Then pass to the <b>next number</b> and do the same with it. The current number is remembered if its occurrences are maximal. As you may guess, when a number equal to <code>int.MinValue</code> is found (already processed number) we should skip it. <br/><span class=\"tab\"></span>Another solution is to <b>sort the numbers</b> in ascending order and then the elements with same value will be placed next to each other. So, basically we then <b>find the longest sequence of neighbor equal elements</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11. Write a program to find a sequence of neighbor numbers in an array, which has a <b>sum of certain number S</b>. Example: {4, 3, 1, <b>4</b>, <b>2</b>, <b>5</b>, 8}, S=11 <span style=\"font-family: Wingdings;\">à</span>  {4, 2, 5}.<br/><br/><span class=\"tab\"></span>Guidelines: This exercise can be solved with <b>two nested loops</b>. The <b>first loop</b> assigns a starting index. The <b>second loop</b> sums the elements from the starting index to the right until this partial sum reaches or is greater than <b>S</b>. If the sum is equal to <b>S</b>, we will remember the starting index (from the first loop) and the ending index (from the second loop). <br/><span class=\"tab\"></span>If all numbers are positive, there is a <b>much faster algorithm</b>. We <b>sum all numbers from left to the right</b>, starting from zero. If the current sum becomes greater than <b>S</b> during the summation, we remove the leftmost number in the sequence and we subtract it from the sum. If the current sum is still greater than <b>S</b>, we remove the next leftmost number and do that until the current sum becomes smaller than <b>S</b>. When the sum becomes smaller than <b>S</b> we <b>add the next number on right</b>. If we find a sum equal to <b>S</b>, we print the sum and the sequence to the console. So this solution uses <b>just with one scan</b> through the elements in the array.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12. Write a program, which creates <b>square matrices</b> like those in the <b>figures below</b> and prints them formatted to the console. The size of the matrices will be read from the console. E.g. matrices with size of 4 x 4:<br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch7-12.gif\"><br/><br/><span class=\"tab\"></span>Guidelines: a), b), c) Think about appropriate <b>ways for iterating through the matrices</b> with <b>two nested loops</b>. <br/><span class=\"tab\"></span>d) We can start from (0, 0) and go <b>down N times</b>. Therefore, go to the <b>right N-1 times</b>, after that <b>up N-1 times</b>, after that <b>left N-2 times</b>, after that <b>down N-2 times</b> and etc. At each iteration we place the next number in a sequence 1, 2, 3, …, N in the cell, which we are leaving.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012/Program.cs" + " target=\"_blank\"><b><u>Link 12a</u></b></a><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012b/Program.cs" + " target=\"_blank\"><b><u>Link 12b</u></b></a><span class=\"tab\"></span><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012c/Program.cs" + " target=\"_blank\"><b><u>Link 12c</u></b></a><span class=\"tab\"></span><br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2012d/Program.cs" + " target=\"_blank\"><b><u>Link 12d</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Write a program, which creates a rectangular array with size of <code>n</code> by <code>m</code> elements. The dimensions and the elements should be read from the console. Find a <b>platform with size of (3, 3) with a maximal sum</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Look at the previous solution.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2013/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>14. Write a program, which finds the <b>longest sequence of equal string elements in a matrix</b>. A sequence in a matrix we define as a set of neighbor elements <b>on the same row, column or diagonal</b>.<br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch7-14.jpeg\"><br/><br/><span class=\"tab\"></span>Guidelines: Check every element in a diagonal line, a row and a column until you get a <b>sequence</b>. If you get a sequence, check whether this sequence is longer than the currently longest sequence.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2014/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>15. Write a program, which creates an array containing <b>all Latin letters</b>. The user inputs <b>a word</b> from the console and as result the program prints to the console the <b>indices of the letters from the word</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  We can solve this problem with <b>two nested loops</b> (one for the words and one for the letters of the current word). There is a solution without using an array: we can calculate the index of a given uppercase Latin letter ch using the expression: <code>(int) ch – (int) 'A'</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2015/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>16. Write a program, which uses a <b>binary search</b> in a <b>sorted</b> array of integer numbers to find a certain element.<br/><br/><span class=\"tab\"></span>Guidelines: Find on the Internet information about <b>the algorithm \"binary search\"</b>. Note that binary search works only on <b>sorted arrays</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2016/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>17. Write a program, which sorts an array of integer elements using a \"<b>merge sort</b>\" algorithm.<br/><br/><span class=\"tab\"></span>Guidelines: Find on the Internet information about the <b>algorithm \"merge sort\"</b> and its implementations in C#. It is a bit <b>complicated to write merge sort efficiently</b>. You can have <b>3 preallocated arrays</b> when merging arrays: <b>two arrays for keeping the numbers for merging</b> and а <b>result array</b>. Thus you will never allocate new arrays during the algorithm’s execution. The arrays will be allocated just once at the start and you will just change their purpose (<b>swap them</b>) during the algorithm execution.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2017/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>18. Write a program, which sorts an array of integer elements using a \"<b>quick sort</b>\" algorithm..<br/><br/><span class=\"tab\"></span>Guidelines: Find information about <b>the \"quick sort\" algorithm</b> in Internet and its C# implementations. It can be best implemented by using <b>recursion</b>. Generally at each step you choose an element called <b>pivot</b> and reorder the array into two sections: at the <b>left side</b> move all <b>elements ≤ pivot</b> and at the <b>right side</b> move all <b>elements > pivot</b>. Finally <b>run the quicksort algorithm recursively</b> over the left and the right sides.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2018/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>19. Write a program, which finds <b>all prime numbers</b> in the range [1…10,000,000].<br/><br/><span class=\"tab\"></span>Guidelines: Find on the Internet information about \"<b>The sieve of Erathostenes</b>\" (you have probably heard about it in math classes in high-school).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2019/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>20. Write a program, which checks whether there is a <b>subset</b> of given array of <b>N</b> elements, which has a <b>sum S</b>. The numbers <code>N, S</code> and the array values are read from the console. Same number can be used many times. <br/><span class=\"tab\"></span>Example: {2, <b>1</b>, <b>2</b>, 4, 3, <b>5</b>, 2, <b>6</b>}, <b>S = 14</b> <span style=\"font-family: Wingdings;\">à</span>  yes (1 + 2 + 5 + 6 = 14)<br/><br/><span class=\"tab\"></span>Guidelines: <b>Generate all possible sums</b> this way: take all the numbers and mark them as \"<b>possible sum</b>\". Then take every number <code>ko, k2, …, kn-1</code> and for each already marked \"possible sum\" <code>p</code>, mark as possible the sum <code>p+ki</code>. If at some step you get <code>S</code>, a solution is found. You can keep track of the \"possible sums\" either in a <code>bool[]</code> array <code>possible[]</code>, where each index is a possible sum, or in a more complex data structure like <code>Set<int></code>. Once you have <code>possible[S] == true</code>, you can find a number <code>ki</code> such that possible<code>[S-ki] == true</code>, print <code>ki</code> and subtract it from <code>S</code>. Repeat the same to find the next <code>ki</code> and print and subtract is again, until <code>S</code> reaches 0. <br/><span class=\"tab\"></span><b>Another algorithm</b>: generate <b>all possible subsets</b> of the numbers by a <code>for</code>-loop from 0 to <code>2N-1</code>. If we have a number <code>p</code>, take its binary representation (which consists of <b>exactly N bits</b>) and sum the numbers that correspond to 1 in the binary representation of <code>p</code> (with a <b>nested loop</b> from 0 to <code>N-1</code>). Thus all possible sums will be generated and if some of them is <code>S</code>, it can be printed. Note that <b>this algorithm is slow</b> (needs exponential time and cannot run for 100 or 1000 elements). It also does not allow using the same array element twice in the sum.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2020/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>21. Write a program which by given <b>N</b> numbers, <b>K</b> and <b>S</b>, finds <b>K</b> elements out of the <b>N</b> numbers, the sum of which is exactly <b>S</b> or says it is not possible. <br/><span class=\"tab\"></span>Example: {3, <b>1</b>, 2, <b>4</b>, <b>9</b>, 6}, <b>S = 14</b>,<b> K = 3</b> <span style=\"font-family: Wingdings;\">à</span> yes (1 + 2 + 4 = 14)<br/><br/><span class=\"tab\"></span>Guidelines: <b>See the previous problem</b>. Generate all subsets <b>of exactly K elements</b> (the <b>second algorithm</b>) and check if their sum is equal to <code>S</code>.<br/><span class=\"tab\"></span>Try in the <b>first algorithm</b> to think how to keep the count of the numbers used in the sum in order to take exactly <b>K</b> numbers. Can you define a matrix <code>possible[p, n]</code> to keep whether the number <code>p</code> can be obtained as a sum of the first <code>n</code> numbers (the numbers <code>ko, k2, …, kn-1)</code>?<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2021/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>22. Write a program, which reads an array of integer numbers from the console and <b>removes a minimal number of elements</b> in such a way that <b>the remaining array is sorted</b> in an increasing order. <br/><span class=\"tab\"></span>Example: {6, <b>1</b>, 4, <b>3</b>, 0, <b>3</b>, 6, <b>4</b>, <b>5</b>} <span style=\"font-family: Wingdings;\">à</span>  {1, 3, 3, 4, 5}<br/><br/><span class=\"tab\"></span>Guidelines: Use <b>dynamic programming</b> to find the <b>longest increasing sub-sequence</b> in the input sequence <code>arr[]</code>. The elements not included in the maximal increasing sequence should be removed in order the array to become sorted.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2022/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>23. Write a program, which reads the integer numbers <code>N</code> and <code>K</code> from the console and prints <b>all variations of K elements of the numbers in the interval [1…N]</b>.<br/><span class=\"tab\"></span>Example:  N = 3 <span style=\"font-family: Wingdings;\">à</span>  {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}<br/><br/><span class=\"tab\"></span>Guidelines: Start from the <b>first variation</b> in the lexicographical order: <b>{1, 1, …} K</b> times. Think of this as <b>k-digit number</b>. To <b>obtain the next variation, increase the last digit</b>. If it becomes greater than N, change it to 1 and increase the next digit on the left. Do the same on the left until the first digit goes greater than N.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%207%20Solution%2023/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng8 = "<h2>Chapter 8. Numeral Systems</h2><br/><span class=\"tab\"></span>1. Convert the numbers 151, 35, 43, 251, 1023 and 1024 to the <b>binary numeral system</b>.<br/><br/><span class=\"tab\"></span>Guidelines: You can check your results with the help of the Windows built-in calculator, which supports numeral systems in <b>\"Programmer\" mode</b>. The results are: 10010111, 100011, 101011, 11111011, 1111111111 and 10000000000.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Convert the number 1111010110011110(2) to <b>hexadecimal</b> and <b>decimal</b> numeral systems.<br/><br/><span class=\"tab\"></span>Guidelines: Like the previous exercise. Result: F59E(16) and 62878(10).<br/><br/><span class=\"tab\"></span>Solution:  <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-2.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span></span>3. Convert the hexadecimal numbers FA, 2A3E, FFFF, 5A0E9 to <b>binary</b> and <b>decimal</b> numeral systems.<br/><br/><span class=\"tab\"></span>Guidelines: Like the previous exercise. The results are: FA(16) = 250(10) = 11111010(2), 2A3E(16) = 10814(10) = 10101000111110(2), FFFF(16) = 65535(10) = 1111111111111111(2) and 5A0E9(16) = 368873(10) = 1011010000011101001(2).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-3.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span></span>4. Write a program that converts a <b>decimal number to binary one</b>.<br/><br/><span class=\"tab\"></span>Guidelines: The rule is <b>\"divide by 2 and concatenate the remainders in reversed order\"</b>. For division with a remainder we use the % operator. You can cheat by invoking <code>Convert.ToString(numDecimal, 2) </code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-4.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a program that converts a <b>binary number to decimal one</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Start with a <b>sum of 0</b>. Multiply the <b>right-most bit</b> with <b>1</b> and add it to the sum. Multiply the <b>next bit</b> on the left by <b>2</b> and add it to the sum. Multiply the <b>next bit</b> on the left by <b>4</b>, the <b>next</b> by <b>8</b> and so on. You can cheat by invoking <code>Convert.ToInt32(binaryNumAsString, 2) </code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-5.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a program that converts a <b>decimal number to hexadecimal one</b>.<br/><br/><span class=\"tab\"></span>Guidelines:  The rule is <b>\"divide by the base of the system (16) and concatenate the remainders in reversed order\"</b>. A logic that gets a hexadecimal digit (0…F) by decimal number (0…15) should also be implemented. You can cheat by invoking <code>num.ToString(\"X\")</code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-6.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a program that converts a <b>hexadecimal number to decimal one</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Start with a <b>sum of 0</b>. Multiply the <b>right-most</b> digit with <b>1</b> and add it to the sum. Multiply the <b>next digit</b> to the left by <b>16</b> and add it to the sum. Multiply the <b>next digit</b> by <b>16*16</b>, the <b>next</b> by <b>16*16*16</b> and so on. You can cheat by invoking <code>Convert.ToInt32(hexNumAsString, 16) </code>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-7.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write a program that converts a <b>hexadecimal number to binary one. </b><br/><br/><span class=\"tab\"></span>Guidelines: Use the fast method for transitioning between hexadecimal and binary numeral system (<b>each hexadecimal digit turns to 4 binary bits</b>).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-8.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a program that converts a <b>binary number to hexadecimal one</b>.<br/><br/><span class=\"tab\"></span>Guidelines: Use the fast method for transitioning from binary to hexadecimal numeral system (<b>each 4 binary bits correspond to a hexadecimal digit</b>).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch8-9.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that converts a <b>binary number to decimal</b> using the Horner scheme.<br/><br/><span class=\"tab\"></span>Guidelines: Directly apply the Horner scheme.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.  Write a program that converts <b>Roman digits to Arabic</b> ones.<br/><br/><span class=\"tab\"></span>Guidelines: <b>Scan the digits of the Roman number</b> from left to right and add them up to a sum, which is initialized with a 0. When processing each Roman digit, take it with a positive or negative sign, <b>depending on the digit after it</b> (whether it has a bigger or smaller decimal value).<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>12.  Write a program that converts <b>Arabic digits to Roman ones</b>.<br/><br/><span class=\"tab\"></span>Guidelines: We have exactly the same correspondence for the numbers <b>10, 20, …, 90</b> with their Roman representation <b>\"X\", \"L\" and \"C\"</b>. The same is valid for the numbers <b>100, 200, …, 900</b> and their Roman representation with <b>\"C\", \"D\" and \"M\"</b> and so on. <br/><span class=\"tab\"></span>We are now ready to <b>convert the number N into the Roman numeral system</b>. It must be in the range [1…3999], otherwise we should report an error. First we separate the thousands (N / 1000) and replace them with their Roman counterpart. After that we separate the hundreds (N / 100) % 10) and separate them with their Roman counterpart and so on.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2012/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>13. Write a program that by given N, S, D converts the number N from an S-based numeral system to a D based numeral system.<br/><br/><span class=\"tab\"></span>Guidelines: You can convert first from <b>S-based system to decimal number</b> and then from decimal number to <b>D-based system</b>.<br/><br/><span class=\"tab\"></span>Solution: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%208%20Solution%2013/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
    public static string CSEng9 = "<h2>Chapter 9. Methods</h2><br/><span class=\"tab\"></span>1. Write a code that by given name prints on the console <code>\"Hello, <name>!\"</code> (for example:  <code>\"Hello, Peter!\" </code>). <br/><br/><span class=\"tab\"></span>Упътване: Use a method that takes the name as parameter of type <code>string</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><img src=\"/Resources/CSResources/ch9-1.jpg\"><br/><br/><hr><br/><br/><span class=\"tab\"></span>2. Create a method <code>GetMax()</code> with two integer (<code>int</code>) parameters, that returns maximal of the two numbers. Write a program that reads three numbers from the console and prints the biggest of them. Use the <code>GetMax()</code> method you just created.<br/><br/><span class=\"tab\"></span>Упътване: Use the expression <code>Max(a, b, c) = Max(Max(a, b), c)</code>.<br/><br/><span class=\"tab\"></span>Решение:  <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%202/Program.cs" + "target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>3. Write a method that returns <b>the English name of the last digit</b> of a given number. Example: for 512 prints \"two\"; for 1024 prints \"four\".br/><br/><span class=\"tab\"></span>Упътване: Use the reminder of <b>division by 10</b> and then a <code>switch</code> statement.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%203/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>4. Write a method that finds <b>how many times certain number can be found in a given array</b>.<br/><br/><span class=\"tab\"></span>Упътване: The method must take as parameter an array of integer numbers (<code>int[]</code>) and the number that has to be counted (<code>int</code>).<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%204/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>5. Write a method that checks whether an element, from a certain position in an array is <b>greater than its two neighbors</b>.<br/><br/><span class=\"tab\"></span>Упътване:  Just <b>perform a check</b>. The elements of the first and the last position in the array will be compared only with their left and right neighbor.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%205/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>6. Write a method that returns the position of <b>the first occurrence</b> of an element from an array, such that it is greater than its two neighbors simultaneously. Otherwise the result must be -1.<br/><br/><span class=\"tab\"></span>Упътване:  Invoke the method from the <b>previous problem</b> in a <code>for</code>-loop.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%206/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>7. Write a method that prints the digits of a given decimal number in a reversed order. For example 256, must be printed as 652.<br/><br/><span class=\"tab\"></span>Упътване: There are two solutions: <br/><span class=\"tab\"></span><b>First solution</b>: Let the number is num. So while <code>num ≠ 0</code> we print its last digit (<code>num % 10</code>) and then divide <code>num</code> by 10. <br/><span class=\"tab\"></span><b>Second solution</b>: Convert the number into a string <code>string</code> and print it in a reverse order with a <code>for</code>-loop. This is a bit cheater’s approach.br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%207/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>8. Write a method that calculates the <b>sum of two very long positive integer numbers</b>. The numbers are represented as <b>array digits</b> and the last digit (the ones) is stored in the array at index 0. Make the method work for all numbers with length up to 10,000 digits.<br/><br/><span class=\"tab\"></span>Упътване: The reader must implement own method that <b>calculates the sum of very big numbers</b>. The digits on position zero will keep the ones; the digit on the first position will keep the tenths and so on. When two very big numbers are about to be calculated, the ones of their sum will be equal to (<code>firstNumber[0] + secondNumber[0]) % 10</code>, the tenths on other side will be equal to (<code>firstNumber[1] + secondNumber[1]) % 10 + (firstNumber[0] + secondNumber[0])/10</code> and so on.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%208/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>9. Write a method that finds the biggest element of an array. Use that method to implement sorting in descending order.<br/><br/><span class=\"tab\"></span>Упътване: First write a method that finds the <b>biggest element in array</b> and then modify it to find the biggest element in <b>given range of the array</b>, e.g. in the elements at indexes [3…10]. Finally find the <b>biggest number in the range [1…n-1] </b> and <b>swap it with the first element</b>, then find the biggest element in the range [2…n-1] and swap it with the second element of the array and so on. Think when the algorithm should finish.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%209/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>10. Write a program that calculates and prints the <code>n! </code> for any n in the range <code> [1…100] </code>.<br/><br/><span class=\"tab\"></span>Упътване: The reader must implement own method that calculates the <b>product of very big numbers</b>, because the value of <code>100! </code> does not fit in variable of type <code>ulong</code> or <code>decimal</code>. The numbers can be represented in an array of reversed digits (one digit in each element). For example, the number <code>512</code> can be represented as <code>{2, 1, 5}</code>. Then the multiplication can be implemented in the way done in the elementary school (multiply digit by digit and then calculate the sum).Another easier way to work with extremely large numbers such as <code>100! </code> is by using the library <code>System.Numerics.dll</code> (you have to add a reference to it in your project). Look for Information in internet about how to use the class <code>System.Numerics.BigInteger</code>.Finally calculate in a loop <code>k! </code> for <code>k = 1, 2, …, n</code>.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2010/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr><br/><br/><span class=\"tab\"></span>11.  Write a program that solves the following tasks: <br/><span class=\"tab\"></span>-     Put the digits from an integer number into a reversed order. <br/><span class=\"tab\"></span>-     Calculate the average of given sequence of numbers. <br/><span class=\"tab\"></span>-     Solve the linear equation <code>a * x + b = 0</code>.<br/><span class=\"tab\"></span>Create appropriate <b>methods</b> for each of the above tasks. <br/><span class=\"tab\"></span>Make the program show a <b>text menu</b> to the user. By choosing an option of that menu, the user will be able to choose which task to be invoked. <br/><span class=\"tab\"></span>Perform validation of the input data: <br/><span class=\"tab\"></span>-     The integer number must be a positive in the range [1…50,000,000]. <br/><span class=\"tab\"></span>-     The sequence of numbers cannot be empty. <br/><span class=\"tab\"></span>-     The coefficient a must be non-zero.<br/><br/><span class=\"tab\"></span>Упътване: Firstly, create the necessary <b>methods</b>. To <b>create the menu</b> display a list in which the actions are represented as numbers (1 – reverse, 2 – average, 3 – equation). Ask the user to choose from 1 to 3.<br/><br/><span class=\"tab\"></span>Решение: <br/><span class=\"tab\"></span><a href=" + "https://github.com/ivanpop/CS-for-Dummies/blob/master/Chapter%209%20Solution%2011/Program.cs" + " target=\"_blank\"><b><u>Link</u></b></a><br/><br/><hr>";
}
